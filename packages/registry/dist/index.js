#!/usr/bin/env node
import{Command as Te}from"commander";var x={name:"payloadbase",version:"1.0.0",description:"Add fields and blocks to your payload cms.",publishConfig:{access:"public"},license:"MIT",author:{name:"devsub",url:"https://devsub.de/en"},repository:{type:"git",url:"https://github.com/devsub-agency/payloadbase",directory:"templates"},files:["dist"],keywords:["payload","components","fields","blocks"],type:"module",exports:"./dist/index.js",bin:"./dist/index.js",scripts:{dev:"tsup --watch",build:"tsup",typecheck:"tsc --noEmit",clean:"rimraf dist && rimraf components","start:dev":"cross-env REGISTRY_URL=http://localhost:3333/r node dist/index.js","start:prod":"cross-env REGISTRY_URL=https://ui.shadcn.com/r node dist/index.js",start:"node dist/index.js","format:write":'prettier --write "**/*.{ts,tsx,mdx}" --cache',"format:check":'prettier --check "**/*.{ts,tsx,mdx}" --cache',release:"changeset version","pub:beta":"pnpm build && pnpm publish --no-git-checks --access public --tag beta","pub:next":"pnpm build && pnpm publish --no-git-checks --access public --tag next","pub:release":"pnpm build && pnpm publish --access public",test:"vitest run","test:dev":"REGISTRY_URL=http://localhost:3333/r vitest run"},dependencies:{chalk:"^5.3.0",commander:"^12.1.0",cosmiconfig:"^9.0.0",diff:"^7.0.0",execa:"^9.5.1","fast-glob":"^3.3.2","fs-extra":"^11.2.0","https-proxy-agent":"^7.0.5",kleur:"^4.1.5","node-fetch":"^3.3.2",ora:"^8.1.1",prompts:"^2.4.2","ts-morph":"^24.0.0","tsconfig-paths":"^4.2.0",zod:"^3.23.8"},devDependencies:{"@types/fs-extra":"^11.0.4","@types/lodash.template":"^4.5.3","@types/prompts":"^2.4.9",tsup:"8.3.5","type-fest":"^4.29.0",typescript:"^5.7.2"}};import{Command as Re}from"commander";import{red as oe,white as re,green as ne,yellow as se}from"kleur/colors";var p={error:oe,warn:se,info:re,success:ne},r={error(...e){console.log(p.error(e.join(" ")))},warn(...e){console.log(p.warn(e.join(" ")))},info(...e){console.log(p.info(e.join(" ")))},success(...e){console.log(p.success(e.join(" ")))},log(...e){console.log(e.join(" "))},break(){console.log("")}};import je from"path";import{z as y}from"zod";import F from"path";import $ from"fs-extra";var u=".payloadbase.json",D=async(e,t)=>{let o={version:"1.0.0",initialized:!0,timestamp:new Date().toISOString(),shadcnInstalled:!1,...t};await $.writeJSON(F.join(e,u),o,{spaces:2})},ie=async e=>{try{return await $.readJSON(F.join(e,u))}catch{return null}},z=async e=>!!(await ie(e))?.initialized,O={version:"1.0.0",initialized:!0,timestamp:new Date().toISOString(),shadcnInstalled:!1};import E from"fs-extra";import ae from"path";var M=e=>{(!E.existsSync(e.cwd)||!E.existsSync(ae.resolve(e.cwd,"package.json")))&&(r.error("Target project does not exist or is not a valid Payload project"),process.exit(0))};import{z as S}from"zod";import{z as l}from"zod";var U=l.enum(["templates/fields","templates/blocks","templates/components"]),ce=l.object({path:l.string(),type:U}),pe=l.object({name:l.string(),type:U,dependencies:l.array(l.string()).optional(),registryDependencies:l.array(l.string()).optional(),files:l.array(ce),docs:l.string().optional()}),b=l.array(pe);var le=S.object({found:S.array(b.element),notFound:S.array(S.string())}),T=(e,t)=>{let o=le.parse({found:[],notFound:[]});return t.forEach(n=>{let s=e.find(i=>i.name.toLowerCase()===n.toLowerCase());s?o.found.push(s):o.notFound.push(n)}),o};import{z as me}from"zod";var de=e=>{if(r.error("Something went wrong. Please check the error below for more details."),r.error("If the problem persists, please open an issue on GitHub."),r.error(""),typeof e=="string"&&(r.error(e),r.break(),process.exit(1)),e instanceof me.ZodError){r.error("Validation failed:");for(let[t,o]of Object.entries(e.flatten().fieldErrors))r.error(`- ${p.info(t)}: ${o}`);r.break(),process.exit(1)}e instanceof Error&&(r.error(e.message),r.break(),process.exit(1)),r.break(),process.exit(1)},m=de;var fe="http://localhost:3000/registry",A=async()=>{try{let e=await ge("index.json");return b.parse(e)}catch(e){r.error(`
`),m(e)}},ge=async e=>{try{let t=await fetch(ye(e));if(!t.ok)throw new Error(`Failed to fetch registry: ${t.statusText}`);return t.json()}catch(t){return r.error(`
`),m(t),null}},ye=e=>`${fe}/${e}`;var N=async(e,t)=>{let o=new Set,n=[],s=i=>{o.has(i.name)||(o.add(i.name),i.registryDependencies?.length&&i.registryDependencies.forEach(a=>{let c=t.find(f=>f.name===a);c&&s(c)}),n.push(i))};return e.forEach(i=>s(i)),n};import he from"path";import k from"fs-extra";import{execa as J}from"execa";async function P(e){let{options:t,projectDir:o}=e;try{let s="npm";return t?.pnpm||k.existsSync(`${o}/pnpm-lock.yaml`)?s="pnpm":t?.yarn||k.existsSync(`${o}/yarn.lock`)?s="yarn":t?.npm||k.existsSync(`${o}/package-lock.json`)?s="npm":t?.bun||k.existsSync(`${o}/bun.lockb`)?s="bun":await n("pnpm")&&(s="pnpm"),s}catch{return"npm"}async function n(s){try{return process.platform==="win32"?await J`where ${s}`:await J`command -v ${s}`,!0}catch{return!1}}}import ue from"ora";function g(e,t){return ue({text:e,isSilent:t?.silent})}import we from"fs-extra";import xe from"prompts";import{execa as be}from"execa";var L=async(e,t)=>{if(!t?.length)return;let o=g("Installing dependencies.").start(),n=await P({options:null,projectDir:e}),s="";if(Se(e)&&n==="npm"){o.stopAndPersist(),r.warn(`
It looks like you are using React 19. 
Some packages may fail to install due to peer dependency issues in npm (see https://ui.shadcn.com/react-19).
`);let i=await xe([{type:"select",name:"flag",message:"How would you like to proceed?",choices:[{title:"Use --force",value:"force"},{title:"Use --legacy-peer-deps",value:"legacy-peer-deps"}]}]);i&&(s=i.flag)}o?.start(),await be(n,[n==="npm"?"install":"add",...n==="npm"&&s?[`--${s}`]:[],...t],{cwd:e}),o?.succeed()},Se=e=>{let t=he.join(e,"package.json"),o=we.readJSONSync(t,{throws:!0});return o?.dependencies?.react?/^(?:\^|~)?19(?:\.\d+)*(?:-.*)?$/.test(o.dependencies.react):!1};import w,{basename as ke}from"path";import{existsSync as _}from"fs-extra";import Pe from"prompts";import I from"fs-extra";var V=async(e,t)=>{if(!t?.length)return;let o=[],n=[],s=[],i=g("Updating files.").start();for(let a of t){let c=ve(a),f=ke(a.path),h=w.join(c,f),C=_(h);if(C&&!e.overwrite){i.stop();let{overwrite:ee}=await Pe({type:"confirm",name:"overwrite",message:`The file ${p.info(f)} already exists. Would you like to overwrite?`,initial:!1});if(!ee){s.push(w.relative(e.cwd,h));continue}i?.start()}_(c)||await I.mkdir(c,{recursive:!0});let X=await Ie(a);await I.writeFile(h,X,"utf-8"),C?n.push(w.relative(e.cwd,h)):o.push(w.relative(e.cwd,h))}},ve=e=>{let t="";e.type==="templates/fields"&&t+"",e.type==="templates/blocks"&&t+"",e.type==="templates/components"&&t+"";let o=e.path.split("/")[1];return`${t}/${o}`},Ie=async e=>{try{let t=w.join(process.cwd(),"packages","registry","src","templates",e.path);return await I.readFile(t,"utf-8")}catch(t){return r.error(`Failed to read file content for ${e.path} from registry. Please try again. If this error please open an issue on GitHub.`),m(t),""}};var G=async(e,t)=>{let o=await A();o||(r.error("Failed to fetch registry"),process.exit(1));let{found:n,notFound:s}=T(o,e);s.length>0&&(r.warn(`Components not found in registry: ${s.join(", ")}`),n.length===0&&(r.error("No valid components to install"),process.exit(1)));let i=await N(n,o);await L(t.cwd,i.flatMap(a=>a.dependencies?.filter(c=>c!==void 0)??[])),await V({cwd:t.cwd,overwrite:t.overwrite},i.flatMap(a=>a.files))};var Ce=y.object({components:y.array(y.string()).optional(),yes:y.boolean(),overwrite:y.boolean(),cwd:y.string(),config:y.boolean()}),Fe=new Re("add").description("add fields and blocks to your payload cms project").argument("[components...]","the fields and blocks to add.").option("-y, --yes","skip confirmation prompt.",!0).option("-o, --overwrite","overwrite existing files.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("--config","only add the config.ts without component",!1).action(async(e,t)=>{try{let o=Ce.parse({components:e,cwd:je.resolve(t.cwd),...t});await z(o.cwd)||(r.error("Project is not initialized. Please run 'payloadbase init' first"),process.exit(0)),o.components?.length||(r.error("Provide at least one field or block to install!"),process.exit(0)),M(o),await G(o.components,o)}catch(o){r.error("An error occurred while adding the field:",o),process.exit(1)}}),H=Fe;import{Command as Ee}from"commander";import{z as d}from"zod";import j from"fs";import $e from"fs-extra";import v from"path";var Y=3,De=["latest"];var W=async e=>j.existsSync(v.resolve(e,"src/payload.config.ts")),q=async e=>j.existsSync(v.resolve(e,"components.json")),B=async e=>{let t=j.existsSync(v.resolve(e,"src")),n=(await $e.readJson(v.resolve(e,"package.json"))).dependencies?.payload??null;if(!n)return R(t,!1,null);let s=n.match(/^(?:(?<major>\d+)|(?<special>latest|beta))$/i);if(!s)return r.warn(`Could not determine payload version from ${n}`),R(t,!1,n);let{special:i,major:a}=s.groups,c=ze(i,a);return c||r.warn(`Unsupported payload version ${n}. Version must be latest or >= ${Y}.0.0`),R(t,c,n)},ze=(e,t)=>e?De.includes(e.toLowerCase()):t?parseInt(t)>=Y:!1,R=(e,t,o)=>({isSrcDir:e,isSupportedPayloadVersion:t,payloadVersion:o});import K from"prompts";import{execa as Oe}from"execa";async function Z({cwd:e,packageManager:t}){let o=g("Installing shadcn/ui...").start();try{let n=t==="npm"?["npx","shadcn@latest","init"]:[t,"dlx","shadcn@latest","init"];await Oe(n[0],n.slice(1),{cwd:e,stdio:"inherit",shell:!0}),o.succeed("shadcn/ui installed successfully")}catch(n){o.fail("Failed to install shadcn components"),m(n)}}import Me from"path";var Ue=d.object({cwd:d.string(),yes:d.boolean(),defaults:d.boolean(),nodeps:d.boolean(),npm:d.boolean(),bun:d.boolean(),yarn:d.boolean(),pnpm:d.boolean()}),Q=new Ee().name("init").description("Initialize your project and install dependencies.").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-y, --yes","skip confirmation prompt.",!0).option("-d, --defaults,","use default configuration.",!1).option("--no-deps,","do not install any dependencies",!1).option("--use-npm,","use npm to install dependencies",!1).action(async e=>{try{let t=Ue.parse(e);await W(t.cwd)||(r.error("Payload is not present in the project."),r.warn(`Please init the project with payload first. Use ${p.success("'npx create-payload-app'")} or check out the official payload documentation.`),process.exit(0)),(await B(t.cwd)).isSupportedPayloadVersion||process.exit(0);let s=await P({options:t,projectDir:t.cwd});if(await q(t.cwd))r.info("Shadcn is already present in the project.");else{if(r.info("Shadcn is not present in the project."),!t.yes){let{proceed:f}=await K({type:"confirm",name:"proceed",message:"Do you want to install shadcn/ui in the project?",initial:!0});f||process.exit(0)}await Z({cwd:t.cwd,packageManager:s})}if(!t.yes){let{proceed:f}=await K({type:"confirm",name:"proceed",message:`Write configuration to ${p.info(`${u}`)}. Proceed?`,initial:!0});f||process.exit(0)}let a=g(`Writing ${u}.`).start(),c=Me.resolve(t.cwd,u);await D(c,{...O,shadcnInstalled:!0}),a.succeed(),r.success("Project is ready to install components!"),r.info(`Use ${p.success("'npx payloadbase@latest add <component>'")} to install components. For a list of available components and for further information check the documentation.`)}catch(t){r.break(),m(t)}});async function Ae(){console.log(`Hello, world! This is ${x.name} v${x.version}`),new Te().name("payloadbase").description("add fields and blocks to your payload cms project").version(x.version||"1.0.0","-v, --version","display the version number").addCommand(H).addCommand(Q)}Ae();
//# sourceMappingURL=index.js.map