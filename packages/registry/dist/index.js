#!/usr/bin/env node
import{Command as _e}from"commander";var $={name:"@basepl/cli",version:"1.0.2",description:"Add fields and blocks to your payload cms.",publishConfig:{access:"public"},license:"MIT",author:{name:"devsub",url:"https://devsub.de/en"},repository:{type:"git",url:"https://github.com/devsub-agency/payloadbase",directory:"templates"},files:["dist","README.md"],keywords:["payload","components","fields","blocks"],type:"module",bin:{basepl:"./dist/index.js"},exports:{".":{import:"./dist/index.js"}},scripts:{dev:"tsup --watch",build:"tsup",typecheck:"tsc --noEmit",clean:"rimraf dist node_modules","start:dev":"cross-env REGISTRY_URL=http://localhost:3000/registry node dist/index.js","start:prod":"cross-env REGISTRY_URL=https://basepl.com/registry/ node dist/index.js",start:"node dist/index.js","format:write":'prettier --write "**/*.{ts,tsx,mdx}" --cache',"format:check":'prettier --check "**/*.{ts,tsx,mdx}" --cache',"pub:beta":"pnpm build && pnpm publish --no-git-checks --access public --tag beta","pub:next":"pnpm build && pnpm publish --no-git-checks --access public --tag next","pub:release":"pnpm build && pnpm publish --access public",test:"vitest run","test:dev":"REGISTRY_URL=http://localhost:3000/registry vitest run"},dependencies:{chalk:"^5.3.0",commander:"^12.1.0",cosmiconfig:"^9.0.0",diff:"^7.0.0",execa:"^9.5.1","fast-glob":"^3.3.2","fs-extra":"^11.2.0",kleur:"^4.1.5","node-fetch":"^3.3.2",ora:"^8.1.1",prompts:"^2.4.2","ts-morph":"^24.0.0","tsconfig-paths":"^4.2.0",zod:"^3.23.8"},devDependencies:{"@types/fs-extra":"^11.0.4","@types/lodash.template":"^4.5.3","@types/prompts":"^2.4.9",tsup:"8.3.5","type-fest":"^4.29.0",typescript:"^5.7.2",rimraf:"^5.0.0"}};import{Command as ze}from"commander";import $e from"path";import{z as u}from"zod";import{red as ce,white as pe,green as le,yellow as de}from"kleur/colors";var l={error:ce,warn:de,info:pe,success:le},n={error(...e){console.log(l.error(e.join(" ")))},warn(...e){console.log(l.warn(e.join(" ")))},info(...e){console.log(l.info(e.join(" ")))},success(...e){console.log(l.success(e.join(" ")))},log(...e){console.log(e.join(" "))},break(){console.log("")}};import{z as k}from"zod";import{z as c}from"zod";var x=c.enum(["templates/fields","templates/blocks","templates/components"]),me=c.object({path:c.string(),content:c.string().optional(),type:x}),O=c.object({name:c.string(),type:x,file:me}),fe=c.object({path:c.string(),type:x}),ge=c.object({name:c.string(),type:x,dependencies:c.array(c.string()).optional(),registryDependencies:c.array(c.string()).optional(),files:c.array(fe)}),b=c.array(ge);var ue=k.object({found:k.array(b.element),notFound:k.array(k.string())}),E=(e,t)=>{let o=ue.parse({found:[],notFound:[]});return t.forEach(i=>{let r=e.find(a=>a.name.toLowerCase()===i.toLowerCase());r?o.found.push(r):o.notFound.push(i)}),o};import D from"path";import{z as ye}from"zod";var he=e=>{if(n.error("Something went wrong. Please check the error below for more details."),n.error("If the problem persists, please open an issue on GitHub."),n.error(""),typeof e=="string"&&(n.error(e),n.break(),process.exit(1)),e instanceof ye.ZodError){n.error("Validation failed:");for(let[t,o]of Object.entries(e.flatten().fieldErrors))n.error(`- ${l.info(t)}: ${o}`);n.break(),process.exit(1)}e instanceof Error&&(n.error(e.message),n.break(),process.exit(1)),n.break(),process.exit(1)},m=he;var we=process.env.REGISTRY_URL??"https://basepl.com/registry",M=async()=>{try{let e=await v("index.json");return b.parse(e)}catch(e){n.error(`
`),m(e)}},v=async e=>{try{let t=await fetch(xe(e));if(!t.ok)throw new Error(`Failed to fetch registry: ${t.statusText}`);return t.json()}catch(t){return n.error(`
`),m(t),null}},xe=e=>(e.endsWith(".json")||(e=be(e)),`${we}/${e}`),be=e=>{if(e.endsWith(".json"))return e;let t=D.parse(e);return D.format({...t,base:void 0,ext:".json"})};var U=async(e,t)=>{let o=new Set,i=[],r=a=>{o.has(a.name)||(o.add(a.name),a.registryDependencies?.length&&a.registryDependencies.forEach(p=>{let s=t.find(d=>d.name===p);s&&r(s)}),i.push(a))};return e.forEach(a=>r(a)),i};import Se from"path";import S from"fs-extra";import{execa as T}from"execa";async function I(e){let{options:t,projectDir:o}=e;try{let r="npm";return t?.pnpm||S.existsSync(`${o}/pnpm-lock.yaml`)?r="pnpm":t?.yarn||S.existsSync(`${o}/yarn.lock`)?r="yarn":t?.npm||S.existsSync(`${o}/package-lock.json`)?r="npm":t?.bun||S.existsSync(`${o}/bun.lockb`)?r="bun":await i("pnpm")&&(r="pnpm"),r}catch{return"npm"}async function i(r){try{return process.platform==="win32"?await T`where ${r}`:await T`command -v ${r}`,!0}catch{return!1}}}import ke from"ora";function g(e,t){return ke({text:e,isSilent:t?.silent})}import Ie from"fs-extra";import je from"prompts";import{execa as Pe}from"execa";var A=async(e,t)=>{if(!t?.length)return;let o=g("Installing dependencies.").start(),i=await I({options:null,projectDir:e}),r="";if(ve(e)&&i==="npm"){o.stopAndPersist(),n.warn(`
It looks like you are using React 19. 
Some packages may fail to install due to peer dependency issues in npm (see https://ui.shadcn.com/react-19).
`);let a=await je([{type:"select",name:"flag",message:"How would you like to proceed?",choices:[{title:"Use --force",value:"force"},{title:"Use --legacy-peer-deps",value:"legacy-peer-deps"}]}]);a&&(r=a.flag)}o?.start(),await Pe(i,[i==="npm"?"install":"add",...i==="npm"&&r?[`--${r}`]:[],...t],{cwd:e}),o?.succeed()},ve=e=>{let t=Se.join(e,"package.json"),o=Ie.readJSONSync(t,{throws:!0});return o?.dependencies?.react?/^(?:\^|~)?19(?:\.\d+)*(?:-.*)?$/.test(o.dependencies.react):!1};import{existsSync as N,promises as _}from"fs";import j,{basename as J}from"path";import Re from"prompts";var Ce=async e=>{try{n.info(`
 Reading template: ${e.path}`);let t=await v(e.path),o=O.parse(t).file.content;return o||(n.error(`This should not happen. Template ${e.path} is empty. Please check the registry and open an issue.`),process.exit(1)),o}catch(t){return n.error(`Failed to read template: ${e.path}`),m(t),""}},L=async(e,t,o)=>{if(!t?.length)return;let i=[],r=[],a=[],p=g("Adding files change ...").start();try{for(let s of t){let d=J(s.path);if(d.includes(".tsx")&&!o.shadcnInstalled){n.warn(`File ${l.info(d)} is a component file. This project was initialized without shadcn/ui, so components are skipped.`);continue}if(d.includes(".tsx")&&e.configOnly){n.warn(`File ${l.info(d)} is a component file. This command was called with --config flag, so components are skipped.`);continue}let w=j.join(e.cwd,"src",s.path).replace(d,""),y=j.join(w,d);if(N(y)&&!e.overwrite){p.stop();let{overwrite:se}=await Re({type:"confirm",name:"overwrite",message:`File ${l.info(J(s.path))} exists. Overwrite?`,initial:!1});if(!se){a.push(j.relative(e.cwd,y)),p.start();continue}p.start()}await _.mkdir(w,{recursive:!0});let ie=await Ce(s);await _.writeFile(y,ie,"utf-8");let z=j.relative(e.cwd,y);N(y)?r.push(z):i.push(z)}p.succeed("Files added successfully"),i.length&&n.info(`Created files:
`+i.map(s=>`  ${s}`).join(`
`)),r.length&&n.info(`Updated files:
`+r.map(s=>`  ${s}`).join(`
`)),a.length&&n.info(`Skipped files:
`+a.map(s=>`  ${s}`).join(`
`))}catch(s){p.fail("Failed to add files"),m(s)}};import G from"path";import V from"fs-extra";var h=".payloadbase.json",W=async(e,t)=>{let o={version:"1.0.0",initialized:!0,timestamp:new Date().toISOString(),shadcnInstalled:!1,...t};await V.writeJSON(G.join(e,h),o,{spaces:2})},R=async e=>{try{return await V.readJSON(G.join(e,h))}catch{return null}},Y=async e=>!!(await R(e))?.initialized,H={version:"1.0.0",initialized:!0,timestamp:new Date().toISOString(),shadcnInstalled:!1};var q=async(e,t)=>{let o=await M();o||(n.error("Failed to fetch registry"),process.exit(1));let{found:i,notFound:r}=E(o,e);r.length>0&&(n.warn(`Components not found in registry: ${r.join(", ")}`),i.length===0&&(n.error("No valid components to install"),process.exit(1)));let a=await R(t.cwd);a||(n.error("Failed to read config file"),process.exit(1));let p=await U(i,o);await A(t.cwd,p.flatMap(s=>s.dependencies?.filter(d=>d!==void 0)??[])),await L({cwd:t.cwd,overwrite:t.overwrite,configOnly:t.config},p.flatMap(s=>s.files),a)};import{existsSync as B}from"fs";import Fe from"path";var Z=e=>{(!B(e.cwd)||!B(Fe.resolve(e.cwd,"package.json")))&&(n.error("Target project does not exist or is not a valid Payload project"),process.exit(0))};var Oe=u.object({components:u.array(u.string()).optional(),yes:u.boolean(),overwrite:u.boolean(),cwd:u.string(),config:u.boolean()}),Ee=new ze("add").description("add fields and blocks to your payload cms project").argument("[components...]","the fields and blocks to add.").option("-y, --yes","skip confirmation prompt.",!0).option("-o, --overwrite","overwrite existing files.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("--config","only add the config.ts without component",!1).action(async(e,t)=>{try{let o=Oe.parse({components:e,cwd:$e.resolve(t.cwd),...t});await Y(o.cwd)||(n.error("Project is not initialized. Please run 'payloadbase init' first"),process.exit(0)),o.components?.length||(n.error("Provide at least one field or block to install!"),process.exit(0)),Z(o),await q(o.components,o)}catch(o){n.error("An error occurred while adding the field:",o),process.exit(1)}}),K=Ee;import{Command as Ae}from"commander";import ne from"prompts";import{z as f}from"zod";import{execa as De}from"execa";async function Q({cwd:e,packageManager:t}){try{let o=t==="npm"?["npx","shadcn@latest","init"]:[t,"dlx","shadcn@latest","init"];await De(o[0],o.slice(1),{cwd:e,stdio:"inherit",shell:!0})}catch(o){m(o)}}import{existsSync as F}from"fs";import Me from"fs-extra";import P from"path";var X=3,Ue=["latest"];var ee=async e=>F(P.resolve(e,"src/payload.config.ts")),te=async e=>F(P.resolve(e,"components.json")),oe=async e=>{let t=F(P.resolve(e,"src")),i=(await Me.readJson(P.resolve(e,"package.json"))).dependencies?.payload??null;if(!i)return C(t,!1,null);let r=i.match(/^(?:(?<major>\d+)|(?<special>latest|beta))$/i);if(!r)return n.warn(`Could not determine payload version from ${i}`),C(t,!1,i);let{special:a,major:p}=r.groups,s=Te(a,p);return s||n.warn(`Unsupported payload version ${i}. Version must be latest or >= ${X}.0.0`),C(t,s,i)},Te=(e,t)=>e?Ue.includes(e.toLowerCase()):t?parseInt(t)>=X:!1,C=(e,t,o)=>({isSrcDir:e,isSupportedPayloadVersion:t,payloadVersion:o});var Ne=f.object({cwd:f.string(),yes:f.boolean(),defaults:f.boolean(),npm:f.boolean().optional(),bun:f.boolean().optional(),yarn:f.boolean().optional(),pnpm:f.boolean().optional(),config:f.boolean().optional()}),re=new Ae().name("init").description("Initialize your project and install dependencies.").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-y, --yes","skip confirmation prompt.",!0).option("-d, --defaults,","use default configuration.",!1).option("--npm,","use npm to install dependencies",!1).option("--bun,","use bun to install dependencies",!1).option("--yarn,","use yarn to install dependencies",!1).option("--pnpm,","use pnpm to install dependencies",!1).option("--config,","initialize in config only mode, not components can be installed.",!1).action(async e=>{try{let t=Ne.parse(e),o=g("Checking project setup.").start(),i=await ee(t.cwd),r=!1;if(i||(o.fail(),n.error("Payload is not present in the project."),n.warn(`Please init the project with payload first. Use ${l.success("'npx create-payload-app'")} or check out the official payload documentation.`),process.exit(0)),o.succeed(),(await oe(t.cwd)).isSupportedPayloadVersion||process.exit(0),t.config)n.info("Initialize in config only mode. No components will be installed.");else{let s=await I({options:t,projectDir:t.cwd});if(await te(t.cwd))r=!0,n.info("Shadcn is already present in the project.");else if(n.info("Shadcn is not present in the project."),!t.yes){let{proceed:w}=await ne({type:"confirm",name:"proceed",message:"Do you want to install shadcn/ui in the project? If not, you wont be able to install components, only config files.",initial:!0});w?(await Q({cwd:t.cwd,packageManager:s}),r=!0):n.info("Initialize in config only mode. No components will be installed.")}}if(!t.yes){let{proceed:s}=await ne({type:"confirm",name:"proceed",message:`Write configuration to ${l.info(`${h}`)}. Proceed?`,initial:!0});s||process.exit(0)}let p=g(`Writing ${h}.`).start();await W(t.cwd,{...H,shadcnInstalled:r}),p.succeed(),n.success("Project is ready to install components!"),n.info(`Use ${l.success("'add <component>'")} to install components. For a list of available components and for further information check the documentation.`)}catch(t){n.break(),m(t)}});process.on("SIGINT",()=>process.exit(0));process.on("SIGTERM",()=>process.exit(0));async function Je(){let e=new _e().name("basepl").description("add fields and blocks to your payload cms project").version($.version||"1.0.0","-v, --version","display the version number");e.addCommand(K).addCommand(re),e.parse()}Je();
//# sourceMappingURL=index.js.map