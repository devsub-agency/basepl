#!/usr/bin/env node
import{Command as Je}from"commander";var F={name:"@basepl/cli",version:"1.0.0",description:"Add fields and blocks to your payload cms.",publishConfig:{access:"public"},license:"MIT",author:{name:"devsub",url:"https://devsub.de/en"},repository:{type:"git",url:"https://github.com/devsub-agency/payloadbase",directory:"templates"},files:["dist"],keywords:["payload","components","fields","blocks"],type:"module",bin:{basepl:"./dist/index.js"},exports:{".":{import:"./dist/index.js"}},scripts:{dev:"tsup --watch",build:"tsup",typecheck:"tsc --noEmit",clean:"rimraf dist node_modules","start:dev":"cross-env REGISTRY_URL=http://localhost:3333/r node dist/index.js","start:prod":"cross-env REGISTRY_URL=https://ui.shadcn.com/r node dist/index.js",start:"node dist/index.js","format:write":'prettier --write "**/*.{ts,tsx,mdx}" --cache',"format:check":'prettier --check "**/*.{ts,tsx,mdx}" --cache',release:"changeset version","pub:beta":"pnpm build && pnpm publish --no-git-checks --access public --tag beta","pub:next":"pnpm build && pnpm publish --no-git-checks --access public --tag next","pub:release":"pnpm build && pnpm publish --access public",test:"vitest run","test:dev":"REGISTRY_URL=http://localhost:3333/r vitest run"},dependencies:{chalk:"^5.3.0",commander:"^12.1.0",cosmiconfig:"^9.0.0",diff:"^7.0.0",execa:"^9.5.1","fast-glob":"^3.3.2","fs-extra":"^11.2.0",kleur:"^4.1.5","node-fetch":"^3.3.2",ora:"^8.1.1",prompts:"^2.4.2","ts-morph":"^24.0.0","tsconfig-paths":"^4.2.0",zod:"^3.23.8"},devDependencies:{"@types/fs-extra":"^11.0.4","@types/lodash.template":"^4.5.3","@types/prompts":"^2.4.9",tsup:"8.3.5","type-fest":"^4.29.0",typescript:"^5.7.2",rimraf:"^5.0.0"}};import{Command as Fe}from"commander";import $e from"path";import{z as u}from"zod";import{red as ie,white as ae,green as ce,yellow as pe}from"kleur/colors";var l={error:ie,warn:pe,info:ae,success:ce},r={error(...e){console.log(l.error(e.join(" ")))},warn(...e){console.log(l.warn(e.join(" ")))},info(...e){console.log(l.info(e.join(" ")))},success(...e){console.log(l.success(e.join(" ")))},log(...e){console.log(e.join(" "))},break(){console.log("")}};import{z as b}from"zod";import{z as c}from"zod";var w=c.enum(["templates/fields","templates/blocks","templates/components"]),le=c.object({path:c.string(),content:c.string().optional(),type:w}),$=c.object({name:c.string(),type:w,file:le}),de=c.object({path:c.string(),type:w}),me=c.object({name:c.string(),type:w,dependencies:c.array(c.string()).optional(),registryDependencies:c.array(c.string()).optional(),files:c.array(de)}),x=c.array(me);var fe=b.object({found:b.array(x.element),notFound:b.array(b.string())}),z=(e,t)=>{let o=fe.parse({found:[],notFound:[]});return t.forEach(s=>{let n=e.find(i=>i.name.toLowerCase()===s.toLowerCase());n?o.found.push(n):o.notFound.push(s)}),o};import D from"path";import{z as ge}from"zod";var ue=e=>{if(r.error("Something went wrong. Please check the error below for more details."),r.error("If the problem persists, please open an issue on GitHub."),r.error(""),typeof e=="string"&&(r.error(e),r.break(),process.exit(1)),e instanceof ge.ZodError){r.error("Validation failed:");for(let[t,o]of Object.entries(e.flatten().fieldErrors))r.error(`- ${l.info(t)}: ${o}`);r.break(),process.exit(1)}e instanceof Error&&(r.error(e.message),r.break(),process.exit(1)),r.break(),process.exit(1)},d=ue;var ye="http://localhost:3000/registry",O=async()=>{try{let e=await j("index.json");return x.parse(e)}catch(e){r.error(`
`),d(e)}},j=async e=>{try{let t=await fetch(he(e));if(!t.ok)throw new Error(`Failed to fetch registry: ${t.statusText}`);return t.json()}catch(t){return r.error(`
`),d(t),null}},he=e=>(e.endsWith(".json")||(e=we(e)),`${ye}/${e}`),we=e=>{if(e.endsWith(".json"))return e;let t=D.parse(e);return D.format({...t,base:void 0,ext:".json"})};var E=async(e,t)=>{let o=new Set,s=[],n=i=>{o.has(i.name)||(o.add(i.name),i.registryDependencies?.length&&i.registryDependencies.forEach(a=>{let p=t.find(m=>m.name===a);p&&n(p)}),s.push(i))};return e.forEach(i=>n(i)),s};import be from"path";import k from"fs-extra";import{execa as M}from"execa";async function S(e){let{options:t,projectDir:o}=e;try{let n="npm";return t?.pnpm||k.existsSync(`${o}/pnpm-lock.yaml`)?n="pnpm":t?.yarn||k.existsSync(`${o}/yarn.lock`)?n="yarn":t?.npm||k.existsSync(`${o}/package-lock.json`)?n="npm":t?.bun||k.existsSync(`${o}/bun.lockb`)?n="bun":await s("pnpm")&&(n="pnpm"),n}catch{return"npm"}async function s(n){try{return process.platform==="win32"?await M`where ${n}`:await M`command -v ${n}`,!0}catch{return!1}}}import xe from"ora";function g(e,t){return xe({text:e,isSilent:t?.silent})}import ke from"fs-extra";import Se from"prompts";import{execa as Ie}from"execa";var U=async(e,t)=>{if(!t?.length)return;let o=g("Installing dependencies.").start(),s=await S({options:null,projectDir:e}),n="";if(Pe(e)&&s==="npm"){o.stopAndPersist(),r.warn(`
It looks like you are using React 19. 
Some packages may fail to install due to peer dependency issues in npm (see https://ui.shadcn.com/react-19).
`);let i=await Se([{type:"select",name:"flag",message:"How would you like to proceed?",choices:[{title:"Use --force",value:"force"},{title:"Use --legacy-peer-deps",value:"legacy-peer-deps"}]}]);i&&(n=i.flag)}o?.start(),await Ie(s,[s==="npm"?"install":"add",...s==="npm"&&n?[`--${n}`]:[],...t],{cwd:e}),o?.succeed()},Pe=e=>{let t=be.join(e,"package.json"),o=ke.readJSONSync(t,{throws:!0});return o?.dependencies?.react?/^(?:\^|~)?19(?:\.\d+)*(?:-.*)?$/.test(o.dependencies.react):!1};import{existsSync as T,promises as A}from"fs";import I,{basename as J}from"path";import je from"prompts";var ve=async e=>{try{r.info(`
 Reading template: ${e.path}`);let t=await j(e.path),o=$.parse(t).file.content;return o||(r.error(`This should not happen. Template ${e.path} is empty. Please check the registry and open an issue.`),process.exit(1)),o}catch(t){return r.error(`Failed to read template: ${e.path}`),d(t),""}},N=async(e,t)=>{if(!t?.length)return;let o=[],s=[],n=[],i=g("Adding files change ...").start();try{for(let a of t){let p=J(a.path),m=I.join(e.cwd,"src",a.path).replace(p,""),y=I.join(m,p);if(T(y)&&!e.overwrite){i.stop();let{overwrite:ne}=await je({type:"confirm",name:"overwrite",message:`File ${l.info(J(a.path))} exists. Overwrite?`,initial:!1});if(!ne){n.push(I.relative(e.cwd,y)),i.start();continue}i.start()}await A.mkdir(m,{recursive:!0});let re=await ve(a);await A.writeFile(y,re,"utf-8");let C=I.relative(e.cwd,y);T(y)?s.push(C):o.push(C)}i.succeed("Files added successfully"),o.length&&r.info(`Created files:
`+o.map(a=>`  ${a}`).join(`
`)),s.length&&r.info(`Updated files:
`+s.map(a=>`  ${a}`).join(`
`)),n.length&&r.info(`Skipped files:
`+n.map(a=>`  ${a}`).join(`
`))}catch(a){i.fail("Failed to add files"),d(a)}};var _=async(e,t)=>{let o=await O();o||(r.error("Failed to fetch registry"),process.exit(1));let{found:s,notFound:n}=z(o,e);n.length>0&&(r.warn(`Components not found in registry: ${n.join(", ")}`),s.length===0&&(r.error("No valid components to install"),process.exit(1)));let i=await E(s,o);await U(t.cwd,i.flatMap(a=>a.dependencies?.filter(p=>p!==void 0)??[])),await N({cwd:t.cwd,overwrite:t.overwrite},i.flatMap(a=>a.files))};import L from"path";import G from"fs-extra";var h=".payloadbase.json",V=async(e,t)=>{let o={version:"1.0.0",initialized:!0,timestamp:new Date().toISOString(),shadcnInstalled:!1,...t};await G.writeJSON(L.join(e,h),o,{spaces:2})},Re=async e=>{try{return await G.readJSON(L.join(e,h))}catch{return null}},W=async e=>!!(await Re(e))?.initialized,Y={version:"1.0.0",initialized:!0,timestamp:new Date().toISOString(),shadcnInstalled:!1};import{existsSync as H}from"fs";import Ce from"path";var q=e=>{(!H(e.cwd)||!H(Ce.resolve(e.cwd,"package.json")))&&(r.error("Target project does not exist or is not a valid Payload project"),process.exit(0))};var ze=u.object({components:u.array(u.string()).optional(),yes:u.boolean(),overwrite:u.boolean(),cwd:u.string(),config:u.boolean()}),De=new Fe("add").description("add fields and blocks to your payload cms project").argument("[components...]","the fields and blocks to add.").option("-y, --yes","skip confirmation prompt.",!0).option("-o, --overwrite","overwrite existing files.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("--config","only add the config.ts without component",!1).action(async(e,t)=>{try{let o=ze.parse({components:e,cwd:$e.resolve(t.cwd),...t});await W(o.cwd)||(r.error("Project is not initialized. Please run 'payloadbase init' first"),process.exit(0)),o.components?.length||(r.error("Provide at least one field or block to install!"),process.exit(0)),q(o),await _(o.components,o)}catch(o){r.error("An error occurred while adding the field:",o),process.exit(1)}}),B=De;import{Command as Te}from"commander";import te from"prompts";import{z as f}from"zod";import{execa as Oe}from"execa";async function Z({cwd:e,packageManager:t}){try{let o=t==="npm"?["npx","shadcn@latest","init"]:[t,"dlx","shadcn@latest","init"];await Oe(o[0],o.slice(1),{cwd:e,stdio:"inherit",shell:!0})}catch(o){d(o)}}import{existsSync as R}from"fs";import Ee from"fs-extra";import P from"path";var K=3,Me=["latest"];var Q=async e=>R(P.resolve(e,"src/payload.config.ts")),X=async e=>R(P.resolve(e,"components.json")),ee=async e=>{let t=R(P.resolve(e,"src")),s=(await Ee.readJson(P.resolve(e,"package.json"))).dependencies?.payload??null;if(!s)return v(t,!1,null);let n=s.match(/^(?:(?<major>\d+)|(?<special>latest|beta))$/i);if(!n)return r.warn(`Could not determine payload version from ${s}`),v(t,!1,s);let{special:i,major:a}=n.groups,p=Ue(i,a);return p||r.warn(`Unsupported payload version ${s}. Version must be latest or >= ${K}.0.0`),v(t,p,s)},Ue=(e,t)=>e?Me.includes(e.toLowerCase()):t?parseInt(t)>=K:!1,v=(e,t,o)=>({isSrcDir:e,isSupportedPayloadVersion:t,payloadVersion:o});var Ae=f.object({cwd:f.string(),yes:f.boolean(),defaults:f.boolean(),npm:f.boolean().optional(),bun:f.boolean().optional(),yarn:f.boolean().optional(),pnpm:f.boolean().optional()}),oe=new Te().name("init").description("Initialize your project and install dependencies.").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-y, --yes","skip confirmation prompt.",!0).option("-d, --defaults,","use default configuration.",!1).option("--npm,","use npm to install dependencies",!1).option("--bun,","use npm to install dependencies",!1).option("--yarn,","use npm to install dependencies",!1).option("--pnpm,","use npm to install dependencies",!1).action(async e=>{try{let t=Ae.parse(e),o=g("Checking project setup.").start();await Q(t.cwd)||(o.fail(),r.error("Payload is not present in the project."),r.warn(`Please init the project with payload first. Use ${l.success("'npx create-payload-app'")} or check out the official payload documentation.`),process.exit(0)),o.succeed(),(await ee(t.cwd)).isSupportedPayloadVersion||process.exit(0);let i=await S({options:t,projectDir:t.cwd});if(await X(t.cwd))r.info("Shadcn is already present in the project.");else{if(r.info("Shadcn is not present in the project."),!t.yes){let{proceed:m}=await te({type:"confirm",name:"proceed",message:"Do you want to install shadcn/ui in the project?",initial:!0});m||process.exit(0)}await Z({cwd:t.cwd,packageManager:i})}if(!t.yes){let{proceed:m}=await te({type:"confirm",name:"proceed",message:`Write configuration to ${l.info(`${h}`)}. Proceed?`,initial:!0});m||process.exit(0)}let p=g(`Writing ${h}.`).start();await V(t.cwd,{...Y,shadcnInstalled:!0}),p.succeed(),r.success("Project is ready to install components!"),r.info(`Use ${l.success("'add <component>'")} to install components. For a list of available components and for further information check the documentation.`)}catch(t){r.break(),d(t)}});process.on("SIGINT",()=>process.exit(0));process.on("SIGTERM",()=>process.exit(0));async function Ne(){let e=new Je().name("basepl").description("add fields and blocks to your payload cms project").version(F.version||"1.0.0","-v, --version","display the version number");e.addCommand(B).addCommand(oe),e.parse()}Ne();
//# sourceMappingURL=index.js.map