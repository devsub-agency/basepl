{"version":3,"sources":["../src/index.ts","../package.json","../src/commands/add.ts","../src/utils/logging/logger.ts","../src/utils/config/configHandler.ts","../src/utils/preflights/preflightAdd.ts","../src/utils/registry/componentsFilter.ts","../src/utils/registry/schema.ts","../src/utils/error/handle-error.ts","../src/utils/registry/fetchRegistry.ts","../src/utils/registry/resolveRegistryDependencies.ts","../src/utils/add/addDependencies.ts","../src/utils/getPackageManager.ts","../src/utils/spinner.ts","../src/utils/add/addFiles.ts","../src/utils/add/addComponents.ts","../src/commands/init.ts","../src/utils/preflights/preflightInit.ts","../src/utils/initShadcn.ts"],"sourcesContent":["#!/usr/bin/env node\r\n\r\nimport { Command } from \"commander\";\r\nimport packageJson from '../package.json';\r\nimport add from './commands/add';\r\nimport { init } from './commands/init';\r\n\r\nasync function main() {\r\n  console.log(`Hello, world! This is ${packageJson.name} v${packageJson.version}`);\r\n\r\n  const program = new Command()\r\n    .name(\"payloadbase\")\r\n    .description(\"add fields and blocks to your payload cms project\")\r\n    .version(\r\n      packageJson.version || \"1.0.0\",\r\n      \"-v, --version\",\r\n      \"display the version number\"\r\n    );\r\n\r\n  program.addCommand(add).addCommand(init);\r\n}\r\n\r\nmain()","{\n  \"name\": \"payloadbase\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Add fields and blocks to your payload cms.\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"license\": \"MIT\",\n  \"author\": {\n    \"name\": \"devsub\",\n    \"url\": \"https://devsub.de/en\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/devsub-agency/payloadbase\",\n    \"directory\": \"templates\"\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"keywords\": [\n    \"payload\",\n    \"components\",\n    \"fields\",\n    \"blocks\"\n  ],\n  \"type\": \"module\",\n  \"exports\": \"./dist/index.js\",\n  \"bin\": \"./dist/index.js\",\n  \"scripts\": {\n    \"dev\": \"tsup --watch\",\n    \"build\": \"tsup\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"clean\": \"rimraf dist && rimraf components\",\n    \"start:dev\": \"cross-env REGISTRY_URL=http://localhost:3333/r node dist/index.js\",\n    \"start:prod\": \"cross-env REGISTRY_URL=https://ui.shadcn.com/r node dist/index.js\",\n    \"start\": \"node dist/index.js\",\n    \"format:write\": \"prettier --write \\\"**/*.{ts,tsx,mdx}\\\" --cache\",\n    \"format:check\": \"prettier --check \\\"**/*.{ts,tsx,mdx}\\\" --cache\",\n    \"release\": \"changeset version\",\n    \"pub:beta\": \"pnpm build && pnpm publish --no-git-checks --access public --tag beta\",\n    \"pub:next\": \"pnpm build && pnpm publish --no-git-checks --access public --tag next\",\n    \"pub:release\": \"pnpm build && pnpm publish --access public\",\n    \"test\": \"vitest run\",\n    \"test:dev\": \"REGISTRY_URL=http://localhost:3333/r vitest run\"\n  },\n  \"dependencies\": {\n    \"chalk\": \"^5.3.0\",\n    \"commander\": \"^12.1.0\",\n    \"cosmiconfig\": \"^9.0.0\",\n    \"diff\": \"^7.0.0\",\n    \"execa\": \"^9.5.1\",\n    \"fast-glob\": \"^3.3.2\",\n    \"fs-extra\": \"^11.2.0\",\n    \"https-proxy-agent\": \"^7.0.5\",\n    \"kleur\": \"^4.1.5\",\n    \"node-fetch\": \"^3.3.2\",\n    \"ora\": \"^8.1.1\",\n    \"prompts\": \"^2.4.2\",\n    \"ts-morph\": \"^24.0.0\",\n    \"tsconfig-paths\": \"^4.2.0\",\n    \"zod\": \"^3.23.8\"\n  },\n  \"devDependencies\": {\n    \"@types/fs-extra\": \"^11.0.4\",\n    \"@types/lodash.template\": \"^4.5.3\",\n    \"@types/prompts\": \"^2.4.9\",\n    \"tsup\": \"8.3.5\",\n    \"type-fest\": \"^4.29.0\",\n    \"typescript\": \"^5.7.2\"\n  }\n}\n","import { Command } from \"commander\";\r\nimport { logger } from \"../utils/logging/logger\";\r\nimport fs from \"fs-extra\";\r\nimport path from \"path\";\r\nimport { z } from \"zod\";\r\nimport { checkInitialized } from \"../utils/config/configHandler\";\r\nimport { preFlightAdd } from \"../utils/preflights/preflightAdd\";\r\nimport { getRegistryIndex } from \"../utils/registry/fetchRegistry\";\r\nimport { filterRequestedComponents } from \"../utils/registry/componentsFilter\";\r\nimport { addComponents } from \"../utils/add/addComponents\";\r\n\r\n//TODO: options for targetDir, options and check for overwrite, create folder if not exists\r\n//add index.json somewhere with name to path mapping and dependencies to other copmponents\r\nexport const addOptionsSchema = z.object({\r\n    components: z.array(z.string()).optional(),\r\n    yes: z.boolean(),\r\n    overwrite: z.boolean(),\r\n    cwd: z.string(),\r\n    config: z.boolean(),\r\n})\r\n\r\nconst add = new Command(\"add\")\r\n    .description(\"add fields and blocks to your payload cms project\")\r\n    .argument(\r\n        \"[components...]\",\r\n        \"the fields and blocks to add.\"\r\n    )\r\n    .option(\"-y, --yes\", \"skip confirmation prompt.\", true)\r\n    .option(\"-o, --overwrite\", \"overwrite existing files.\", false)\r\n    .option(\r\n        \"-c, --cwd <cwd>\",\r\n        \"the working directory. defaults to the current directory.\",\r\n        process.cwd()\r\n    )\r\n    .option(\"--config\", \"only add the config.ts without component\", false)\r\n    .action(async (comp, opt) => {\r\n        try {\r\n            const options = addOptionsSchema.parse({\r\n                components: comp,\r\n                cwd: path.resolve(opt.cwd),\r\n                ...opt,\r\n            })\r\n            const isInitialized = await checkInitialized(options.cwd);\r\n            if (!isInitialized) {\r\n                logger.error(\"Project is not initialized. Please run 'payloadbase init' first\");\r\n                process.exit(0);\r\n            }\r\n\r\n            if (!options.components?.length) {\r\n                logger.error(\"Provide at least one field or block to install!\");\r\n                process.exit(0);\r\n            }\r\n            preFlightAdd(options);\r\n\r\n            await addComponents(options.components, options);\r\n        } catch (error) {\r\n            logger.error(\"An error occurred while adding the field:\", error);\r\n            process.exit(1);\r\n        }\r\n    });\r\n\r\nexport default add;","import {red, white, green, yellow} from \"kleur/colors\";\r\n\r\nexport const loggingColor = {\r\n    error: red,\r\n    warn: yellow,\r\n    info: white,\r\n    success: green,\r\n}\r\n\r\nexport const logger = {\r\n    error(...args: unknown[]) {\r\n        console.log(loggingColor.error(args.join(\" \")))\r\n    },\r\n    warn(...args: unknown[]) {\r\n        console.log(loggingColor.warn(args.join(\" \")))\r\n    },\r\n    info(...args: unknown[]) {\r\n        console.log(loggingColor.info(args.join(\" \")))\r\n    },\r\n    success(...args: unknown[]) {\r\n        console.log(loggingColor.success(args.join(\" \")))\r\n    },\r\n    log(...args: unknown[]) {\r\n        console.log(args.join(\" \"))\r\n    },\r\n    break() {\r\n        console.log(\"\")\r\n    },\r\n}","import path from \"path\";\r\nimport fs from \"fs-extra\";\r\nimport { ConfigFile } from \"./configFile\";\r\n\r\nexport const CONFIG_FILE = '.payloadbase.json';\r\n\r\nexport const createConfig = async (cwd: string, config: Partial<ConfigFile>) => {\r\n  const defaultConfig: ConfigFile = {\r\n    version: '1.0.0',\r\n    initialized: true,\r\n    timestamp: new Date().toISOString(),\r\n    shadcnInstalled: false,\r\n    ...config\r\n  };\r\n  await fs.writeJSON(path.join(cwd, CONFIG_FILE), defaultConfig, { spaces: 2 });\r\n};\r\n\r\nexport const getConfig = async (cwd: string): Promise<ConfigFile | null> => {\r\n  try {\r\n    return await fs.readJSON(path.join(cwd, CONFIG_FILE));\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const checkInitialized = async (cwd: string): Promise<boolean> => {\r\n  const config = await getConfig(cwd);\r\n  return Boolean(config?.initialized);\r\n};\r\n\r\nexport const defaultConfig: ConfigFile = {\r\n  version: '1.0.0',\r\n  initialized: true,\r\n  timestamp: new Date().toISOString(),\r\n  shadcnInstalled: false,\r\n}","import {addOptionsSchema} from \"../../commands/add\";\r\nimport * as ERRORS from \"../error/errors\";\r\nimport {z} from \"zod\";\r\nimport fs from \"fs-extra\";\r\nimport path from \"path\";\r\nimport { logger } from \"../logging/logger\";\r\n\r\nexport const preFlightAdd = (options: z.infer<typeof addOptionsSchema>) => {\r\n    if (!fs.existsSync(options.cwd) || !fs.existsSync(path.resolve(options.cwd, \"package.json\"))) {\r\n        logger.error(\"Target project does not exist or is not a valid Payload project\");\r\n        process.exit(0);\r\n    }\r\n}","import { z } from 'zod'\r\nimport { registryIndexSchema } from './schema'\r\n\r\nconst filterComponentsResultSchema = z.object({\r\n  found: z.array(registryIndexSchema.element),\r\n  notFound: z.array(z.string())\r\n})\r\n\r\ntype FilterComponentsResult = z.infer<typeof filterComponentsResultSchema>\r\n\r\nexport const filterRequestedComponents = (\r\n  registry: z.infer<typeof registryIndexSchema>,\r\n  requestedComponents: string[]\r\n): FilterComponentsResult => {\r\n  const result = filterComponentsResultSchema.parse({\r\n    found: [],\r\n    notFound: []\r\n  })\r\n\r\n  requestedComponents.forEach(requested => {\r\n    const component = registry.find(item => \r\n      item.name.toLowerCase() === requested.toLowerCase()\r\n    )\r\n\r\n    if (component) {\r\n      result.found.push(component)\r\n    } else {\r\n      result.notFound.push(requested)\r\n    }\r\n  })\r\n\r\n  return result\r\n}","import { z } from 'zod';\r\n\r\nexport const registryFileSchemaType = z.enum([\r\n    \"templates/fields\",\r\n    \"templates/blocks\",\r\n    \"templates/components\",\r\n])\r\n\r\nexport const registryFileSchema = z.object({\r\n    path: z.string(),\r\n    type: registryFileSchemaType,\r\n})\r\n\r\nexport const registryItemSchema = z.object({\r\n    name: z.string(),\r\n    type: registryFileSchemaType,\r\n    dependencies: z.array(z.string()).optional(),\r\n    registryDependencies: z.array(z.string()).optional(),\r\n    files: z.array(registryFileSchema),\r\n    docs: z.string().optional(),\r\n})\r\nexport type RegistryFile = z.infer<typeof registryFileSchema>\r\n\r\nexport type RegistryItem = z.infer<typeof registryItemSchema>\r\n\r\nexport const registryIndexSchema = z.array(registryItemSchema);","import { z } from \"zod\"\r\nimport {logger, loggingColor} from \"@/src/utils/logging/logger\";\r\n\r\nconst handleError = (error: unknown) => {\r\n    logger.error(\r\n        `Something went wrong. Please check the error below for more details.`\r\n    )\r\n    logger.error(`If the problem persists, please open an issue on GitHub.`)\r\n    logger.error(\"\")\r\n    if (typeof error === \"string\") {\r\n        logger.error(error)\r\n        logger.break()\r\n        process.exit(1)\r\n    }\r\n\r\n    if (error instanceof z.ZodError) {\r\n        logger.error(\"Validation failed:\")\r\n        for (const [key, value] of Object.entries(error.flatten().fieldErrors)) {\r\n            logger.error(`- ${loggingColor.info(key)}: ${value}`)\r\n        }\r\n        logger.break()\r\n        process.exit(1)\r\n    }\r\n\r\n    if (error instanceof Error) {\r\n        logger.error(error.message)\r\n        logger.break()\r\n        process.exit(1)\r\n    }\r\n\r\n    logger.break()\r\n    process.exit(1)\r\n}\r\n\r\nexport default handleError;","import handleError from \"../error/handle-error\";\r\nimport { logger } from \"../logging/logger\";\r\nimport { registryIndexSchema } from \"./schema\";\r\n\r\nconst REGISTRY_URL = 'http://localhost:3000/registry'\r\n\r\nexport const getRegistryIndex = async () => {\r\n    try{\r\n        const result = await fetchRegistry('index.json');\r\n    return registryIndexSchema.parse(result);\r\n    } catch(e) {\r\n        logger.error(\"\\n\");\r\n        handleError(e);\r\n    }\r\n}\r\n\r\nconst fetchRegistry = async (path: string) => {\r\n    try {\r\n        const result = await fetch(getRegistryUrl(path));\r\n        if (!result.ok) {\r\n            throw new Error(`Failed to fetch registry: ${result.statusText}`)\r\n        }\r\n        return result.json();\r\n    } catch(e) {\r\n        logger.error(\"\\n\");\r\n        handleError(e);\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\n\r\nconst getRegistryUrl = (path: string) => {\r\n    return `${REGISTRY_URL}/${path}`\r\n}","import { RegistryItem } from \"./schema\";\r\n\r\nexport const resolveRegistryDependencies = async (\r\n  items: RegistryItem[], \r\n  registryIndex: RegistryItem[]\r\n): Promise<RegistryItem[]> => {\r\n  const resolved = new Set<string>(); // Track processed items\r\n  const result: RegistryItem[] = []; // Store final list\r\n\r\n  const resolveDependencies = (item: RegistryItem) => {\r\n    if (resolved.has(item.name)) {\r\n      return;\r\n    }\r\n    resolved.add(item.name);\r\n    if (item.registryDependencies?.length) {\r\n      item.registryDependencies.forEach(depName => {\r\n        const dependency = registryIndex.find(reg => reg.name === depName);\r\n        if (dependency) {\r\n          resolveDependencies(dependency);\r\n        }\r\n      });\r\n    }\r\n    result.push(item);\r\n  };\r\n  items.forEach(item => resolveDependencies(item));\r\n  return result;\r\n};","import path from \"path\";\r\nimport { getPackageManager } from \"../getPackageManager\";\r\nimport { RegistryItem } from \"../registry/schema\";\r\nimport { spinner } from \"../spinner\";\r\nimport fse from \"fs-extra\";\r\nimport { type PackageJson } from \"type-fest\"\r\nimport { logger } from \"../logging/logger\";\r\nimport prompts from \"prompts\";\r\nimport { execa } from \"execa\";\r\n\r\nexport const addDependencies = async (cwd: string, dependencies: RegistryItem[\"dependencies\"]) => {\r\n    if (!dependencies?.length) {\r\n        return\r\n    }\r\n    const dependenciesSpinner = spinner(`Installing dependencies.`).start();\r\n    const packageManager = await getPackageManager({ options: null, projectDir: cwd });\r\n    let flag = \"\"\r\n    if (isUsingReact19(cwd) && packageManager === \"npm\") {\r\n        dependenciesSpinner.stopAndPersist();\r\n        logger.warn(\r\n            \"\\nIt looks like you are using React 19. \\nSome packages may fail to install due to peer dependency issues in npm (see https://ui.shadcn.com/react-19).\\n\"\r\n        )\r\n        const confirmation = await prompts([\r\n            {\r\n                type: \"select\",\r\n                name: \"flag\",\r\n                message: \"How would you like to proceed?\",\r\n                choices: [\r\n                    { title: \"Use --force\", value: \"force\" },\r\n                    { title: \"Use --legacy-peer-deps\", value: \"legacy-peer-deps\" },\r\n                ],\r\n            },\r\n        ])\r\n\r\n        if (confirmation) {\r\n            flag = confirmation.flag\r\n        }\r\n    }\r\n    dependenciesSpinner?.start();\r\n    await execa(\r\n        packageManager,\r\n        [\r\n            packageManager === \"npm\" ? \"install\" : \"add\",\r\n            ...(packageManager === \"npm\" && flag ? [`--${flag}`] : []),\r\n            ...dependencies,\r\n        ],\r\n        {\r\n            cwd: cwd,\r\n        }\r\n    )\r\n    dependenciesSpinner?.succeed()\r\n};\r\n\r\nconst isUsingReact19 = (cwd: string) => {\r\n    const packageJsonPath = path.join(cwd, \"package.json\")\r\n    const packageJson = fse.readJSONSync(packageJsonPath, { throws: true }) as PackageJson\r\n\r\n    if (!packageJson?.dependencies?.react) {\r\n        return false\r\n    }\r\n\r\n    return /^(?:\\^|~)?19(?:\\.\\d+)*(?:-.*)?$/.test(packageJson.dependencies.react)\r\n} ","import {z} from 'zod'\r\nimport fse from 'fs-extra'\r\nimport {execa} from 'execa'\r\nimport { initOptionSchema } from '../commands/init'\r\n\r\nexport type PackageManager = 'npm' | 'yarn' | 'pnpm' | 'bun'\r\n\r\nexport async function getPackageManager(args: {\r\n    options: z.infer<typeof initOptionSchema> | null\r\n    projectDir: string\r\n  }): Promise<PackageManager> {\r\n  \r\n    const { options, projectDir } = args\r\n\r\n    try {\r\n      // Check for flag or lockfile\r\n      let detected: PackageManager = 'npm'\r\n      if (options?.pnpm || fse.existsSync(`${projectDir}/pnpm-lock.yaml`)) {\r\n        detected = 'pnpm'\r\n      } else if (options?.yarn || fse.existsSync(`${projectDir}/yarn.lock`)) {\r\n        detected = 'yarn'\r\n      } else if (options?.npm || fse.existsSync(`${projectDir}/package-lock.json`)) {\r\n        detected = 'npm'\r\n      } else if (options?.bun || fse.existsSync(`${projectDir}/bun.lockb`)) {\r\n        detected = 'bun'\r\n      } else if (await commandExists('pnpm')) {\r\n        // Prefer pnpm if it's installed\r\n        detected = 'pnpm'\r\n      }\r\n  \r\n      return detected\r\n    } catch (ignore) {\r\n      return 'npm'\r\n    }\r\n\r\n    async function commandExists(command: string): Promise<boolean> {\r\n        try {\r\n          process.platform === 'win32' ? await execa`where ${command}` : await execa`command -v ${command}`;\r\n          return true\r\n        } catch {\r\n          return false\r\n        }\r\n      }\r\n\r\n  }","import ora, { type Options } from \"ora\"\r\n\r\nexport function spinner(\r\n  text: Options[\"text\"],\r\n  options?: {\r\n    silent?: boolean\r\n  }\r\n) {\r\n  return ora({\r\n    text,\r\n    isSilent: options?.silent,\r\n  })\r\n}\r\n","import path, { basename } from \"path\";\r\nimport { RegistryFile, RegistryItem } from \"../registry/schema\";\r\nimport { spinner } from \"../spinner\";\r\nimport { existsSync } from \"fs-extra\";\r\nimport prompts from \"prompts\";\r\nimport { logger, loggingColor } from \"../logging/logger\";\r\nimport fs from \"fs-extra\";\r\nimport handleError from \"../error/handle-error\";\r\n\r\nexport const addFiles = async (options: { cwd: string, overwrite?: boolean }, files: RegistryItem[\"files\"]) => {\r\n    if (!files?.length) {\r\n        return\r\n    }\r\n\r\n    const filesCreated = []\r\n    const filesUpdated = []\r\n    const filesSkipped = []\r\n\r\n    const filesCreatedSpinner = spinner(`Updating files.`).start();\r\n    for (const file of files) {\r\n        const targetDir = getFileTargetDir(file);\r\n        const fileName = basename(file.path);\r\n        const targetPath = path.join(targetDir, fileName);\r\n        const existingFile = existsSync(targetPath);\r\n\r\n        if (existingFile && !options.overwrite) {\r\n            filesCreatedSpinner.stop()\r\n            const { overwrite } = await prompts({\r\n                type: \"confirm\",\r\n                name: \"overwrite\",\r\n                message: `The file ${loggingColor.info(\r\n                    fileName\r\n                )} already exists. Would you like to overwrite?`,\r\n                initial: false,\r\n            })\r\n\r\n            if (!overwrite) {\r\n                filesSkipped.push(path.relative(options.cwd, targetPath))\r\n                continue\r\n            }\r\n            filesCreatedSpinner?.start()\r\n        }\r\n\r\n        if (!existsSync(targetDir)) {\r\n            await fs.mkdir(targetDir, { recursive: true })\r\n        }\r\n        const content = await getFileContent(file)\r\n        await fs.writeFile(targetPath, content, \"utf-8\")\r\n        existingFile\r\n            ? filesUpdated.push(path.relative(options.cwd, targetPath))\r\n            : filesCreated.push(path.relative(options.cwd, targetPath))\r\n\r\n    };\r\n}\r\n\r\nconst getFileTargetDir = (file: RegistryFile) => {\r\n    const targetPath = \"\";\r\n    if (file.type === \"templates/fields\") {\r\n        targetPath + \"/fields\";\r\n    }\r\n    if (file.type === \"templates/blocks\") {\r\n        targetPath + \"/blocks\";\r\n    }\r\n    if (file.type === \"templates/components\") {\r\n        targetPath + \"/components\";\r\n    }\r\n    const componentName = file.path.split('/')[1];\r\n    return `${targetPath}/${componentName}`;\r\n}\r\n\r\nconst getFileContent = async (file: RegistryFile): Promise<string> => {\r\n    try {\r\n        const templatePath = path.join(\r\n            process.cwd(),\r\n            'packages',\r\n            'registry',\r\n            'src',\r\n            'templates',\r\n            file.path\r\n        )\r\n\r\n        // Read file content\r\n        const content = await fs.readFile(templatePath, 'utf-8')\r\n        return content\r\n    } catch (error) {\r\n        logger.error(`Failed to read file content for ${file.path} from registry. Please try again. If this error please open an issue on GitHub.`)\r\n        handleError(error)\r\n        return \"\"\r\n    }\r\n}","import { addOptionsSchema } from '@/src/commands/add';\r\nimport { z } from 'zod';\r\nimport { logger } from '../logging/logger';\r\nimport { filterRequestedComponents } from '../registry/componentsFilter';\r\nimport { getRegistryIndex } from '../registry/fetchRegistry';\r\nimport { resolveRegistryDependencies } from '../registry/resolveRegistryDependencies';\r\nimport { addDependencies } from './addDependencies';\r\nimport { addFiles } from './addFiles';\r\n\r\nexport const addComponents = async (components: string[], options: z.infer<typeof addOptionsSchema>) => {\r\n    const registryInfo = await getRegistryIndex();\r\n    if (!registryInfo) {\r\n        logger.error(\"Failed to fetch registry\");\r\n        process.exit(1);\r\n    }\r\n\r\n    const { found, notFound } = filterRequestedComponents(registryInfo, components);\r\n\r\n    if (notFound.length > 0) {\r\n        logger.warn(`Components not found in registry: ${notFound.join(', ')}`);\r\n\r\n        if (found.length === 0) {\r\n            logger.error('No valid components to install');\r\n            process.exit(1);\r\n        }\r\n    }\r\n\r\n    const itemsToRegister = await resolveRegistryDependencies(found, registryInfo);\r\n\r\n    await addDependencies(options.cwd, itemsToRegister.flatMap(item => item.dependencies?.filter((dep): dep is string => dep !== undefined) ?? []));\r\n    await addFiles({ cwd: options.cwd, overwrite: options.overwrite }, itemsToRegister.flatMap(item => item.files));\r\n}\r\n","import { Command } from \"commander\";\r\nimport { z } from \"zod\";\r\nimport { logger, loggingColor } from \"../utils/logging/logger\";\r\nimport handleError from \"../utils/error/handle-error\";\r\nimport { get } from \"http\";\r\nimport { checkProjectSetUp, checkShadcnPresents, getPayloadAppDetails } from \"../utils/preflights/preflightInit\";\r\nimport { getPackageManager } from \"../utils/getPackageManager\";\r\nimport prompts from \"prompts\";\r\nimport { initShadcn } from \"../utils/initShadcn\";\r\nimport { spinner } from \"../utils/spinner\";\r\nimport { CONFIG_FILE, createConfig, defaultConfig } from \"../utils/config/configHandler\";\r\nimport path from \"path\";\r\nimport { write } from \"fs\";\r\n\r\nexport const initOptionSchema = z.object({\r\n    cwd: z.string(),\r\n    yes: z.boolean(),\r\n    defaults: z.boolean(),\r\n    nodeps: z.boolean(),\r\n    npm: z.boolean(),\r\n    bun: z.boolean(),\r\n    yarn: z.boolean(),\r\n    pnpm: z.boolean(),\r\n})\r\n\r\n\r\nexport const init = new Command()\r\n    .name(\"init\")\r\n    .description(\"Initialize your project and install dependencies.\")\r\n    .option(\r\n        \"-c, --cwd <cwd>\",\r\n        \"the working directory. defaults to the current directory.\",\r\n        process.cwd()\r\n    )\r\n    .option(\"-y, --yes\", \"skip confirmation prompt.\", true)\r\n    .option(\"-d, --defaults,\", \"use default configuration.\", false)\r\n    .option(\"--no-deps,\", \"do not install any dependencies\", false)\r\n    .option(\"--use-npm,\", \"use npm to install dependencies\", false)\r\n    .action(async (o) => {\r\n        try {\r\n            const options = initOptionSchema.parse(o);\r\n            const isPayloadPresents = await checkProjectSetUp(options.cwd);\r\n            if (!isPayloadPresents) {\r\n                logger.error('Payload is not present in the project.');\r\n                logger.warn(`Please init the project with payload first. Use ${loggingColor.success('\\'npx create-payload-app\\'')} or check out the official payload documentation.`);\r\n                process.exit(0);\r\n            }\r\n            const appDetails = await getPayloadAppDetails(options.cwd);\r\n            if (!appDetails.isSupportedPayloadVersion) {\r\n                process.exit(0);\r\n            }\r\n            const packageManager = await getPackageManager({ options, projectDir: options.cwd });\r\n            const isShadcnPresents = await checkShadcnPresents(options.cwd);\r\n            if (isShadcnPresents) {\r\n                logger.info('Shadcn is already present in the project.');\r\n            } else {\r\n                logger.info('Shadcn is not present in the project.');\r\n                if (!options.yes) {\r\n                    const { proceed } = await prompts({\r\n                        type: 'confirm',\r\n                        name: 'proceed',\r\n                        message: 'Do you want to install shadcn/ui in the project?',\r\n                        initial: true\r\n                    })\r\n\r\n                    if (!proceed) {\r\n                        process.exit(0);\r\n                    }\r\n                }\r\n                await initShadcn({ cwd: options.cwd, packageManager });\r\n            }\r\n\r\n            if(!options.yes) {\r\n                const { proceed } = await prompts({\r\n                    type: \"confirm\",\r\n                    name: \"proceed\",\r\n                    message: `Write configuration to ${loggingColor.info(\r\n                        `${CONFIG_FILE}`\r\n                    )}. Proceed?`,\r\n                    initial: true,\r\n                  })\r\n              \r\n                  if (!proceed) {\r\n                    process.exit(0)\r\n                  }\r\n            }\r\n\r\n            const componentSpinner = spinner(`Writing ${CONFIG_FILE}.`).start();\r\n            const targetPath = path.resolve(options.cwd, CONFIG_FILE);\r\n            await createConfig(targetPath, { ...defaultConfig, shadcnInstalled: true });\r\n            componentSpinner.succeed();\r\n\r\n            logger.success('Project is ready to install components!')\r\n            logger.info(`Use ${loggingColor.success('\\'npx payloadbase@latest add <component>\\'')} to install components. For a list of available components and for further information check the documentation.`);\r\n        } catch (e) {\r\n            logger.break();\r\n            handleError(e);\r\n        }\r\n    }\r\n)\r\n\r\n","import { initOptionSchema } from \"@/src/commands/init\";\r\nimport fs from \"fs\";\r\nimport fse from \"fs-extra\";\r\nimport path from \"path\";\r\nimport { z } from \"zod\";\r\nimport { logger } from \"../logging/logger\";\r\n\r\nexport type PayloadAppDetails = {\r\n    isSrcDir: boolean;\r\n    isSupportedPayloadVersion: boolean;\r\n    payloadVersion: string | null;\r\n}\r\n\r\nconst MINIMUM_MAJOR_VERSION = 3;\r\nconst SUPPORTED_SPECIAL_VERSIONS = ['latest'];\r\n\r\nexport async function preFlightInit(options: z.infer<typeof initOptionSchema>) {\r\n\r\n}\r\n\r\n//Default check for project \r\nexport const checkProjectSetUp = async (projectDir: string) => {\r\n    const isPayloadPresents = fs.existsSync(path.resolve(projectDir, 'src/payload.config.ts'));\r\n    return isPayloadPresents;\r\n}\r\n\r\nexport const checkShadcnPresents = async (projectDir: string) => {\r\n    const isShadcnPresents = fs.existsSync(path.resolve(projectDir, 'components.json'))\r\n    return isShadcnPresents\r\n}\r\n\r\nexport const getPayloadAppDetails = async (projectDir: string): Promise<PayloadAppDetails> => {\r\n  const isSrcDir = fs.existsSync(path.resolve(projectDir, 'src'));\r\n  const packageObj = await fse.readJson(path.resolve(projectDir, 'package.json'));\r\n  const payloadVersion = packageObj.dependencies?.payload ?? null;\r\n\r\n  if (!payloadVersion) {\r\n    return createPayloadDetails(isSrcDir, false, null);\r\n  }\r\n\r\n  const versionMatch = payloadVersion.match(/^(?:(?<major>\\d+)|(?<special>latest|beta))$/i);\r\n  \r\n  if (!versionMatch) {\r\n    logger.warn(`Could not determine payload version from ${payloadVersion}`);\r\n    return createPayloadDetails(isSrcDir, false, payloadVersion);\r\n  }\r\n\r\n  const { special, major } = versionMatch.groups;\r\n  const isSupported = isVersionSupported(special, major);\r\n\r\n  if (!isSupported) {\r\n    logger.warn(`Unsupported payload version ${payloadVersion}. Version must be latest or >= ${MINIMUM_MAJOR_VERSION}.0.0`);\r\n  }\r\n\r\n  return createPayloadDetails(isSrcDir, isSupported, payloadVersion);\r\n};\r\n\r\nconst isVersionSupported = (special?: string, major?: string): boolean => {\r\n  if (special) {\r\n    return SUPPORTED_SPECIAL_VERSIONS.includes(special.toLowerCase());\r\n  }\r\n  return major ? parseInt(major) >= MINIMUM_MAJOR_VERSION : false;\r\n};\r\n\r\nconst createPayloadDetails = (\r\n    isSrcDir: boolean,\r\n    isSupportedPayloadVersion: boolean,\r\n    payloadVersion: string | null\r\n  ): PayloadAppDetails => ({\r\n    isSrcDir,\r\n    isSupportedPayloadVersion,\r\n    payloadVersion\r\n  });","import { execa } from 'execa';\r\nimport { logger } from './logging/logger';\r\nimport { PackageManager } from './getPackageManager';\r\nimport { spinner } from './spinner';\r\nimport handleError from './error/handle-error';\r\n\r\ninterface InitShadcnProps {\r\n    cwd: string;\r\n    packageManager: PackageManager;\r\n}\r\n\r\nexport async function initShadcn({ cwd, packageManager }: InitShadcnProps){\r\n    const shadcnSpinner = spinner('Installing shadcn/ui...').start();\r\n    try {\r\n        const command = packageManager === 'npm'\r\n            ? ['npx', 'shadcn@latest', 'init']\r\n            : [packageManager, 'dlx', 'shadcn@latest', 'init'];\r\n\r\n        await execa(command[0], command.slice(1), {\r\n            cwd,\r\n            stdio: 'inherit',\r\n            shell: true\r\n        });\r\n\r\n        shadcnSpinner.succeed('shadcn/ui installed successfully');\r\n    } catch (error) {\r\n        shadcnSpinner.fail('Failed to install shadcn components');\r\n        handleError(error);\r\n    }\r\n}"],"mappings":"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","names":["Command","package_default","Command","red","white","green","yellow","loggingColor","logger","args","path","z","path","fs","CONFIG_FILE","createConfig","cwd","config","defaultConfig","getConfig","checkInitialized","fs","path","preFlightAdd","options","fs","path","logger","z","z","registryFileSchemaType","registryFileSchema","registryItemSchema","registryIndexSchema","filterComponentsResultSchema","z","registryIndexSchema","filterRequestedComponents","registry","requestedComponents","result","requested","component","item","z","handleError","error","logger","z","key","value","loggingColor","handle_error_default","REGISTRY_URL","getRegistryIndex","result","fetchRegistry","registryIndexSchema","logger","handle_error_default","path","getRegistryUrl","e","resolveRegistryDependencies","items","registryIndex","resolved","result","resolveDependencies","item","depName","dependency","reg","path","fse","execa","getPackageManager","args","options","projectDir","detected","commandExists","command","ora","spinner","text","options","fse","prompts","execa","addDependencies","cwd","dependencies","dependenciesSpinner","spinner","packageManager","getPackageManager","flag","isUsingReact19","logger","confirmation","packageJsonPath","path","packageJson","fse","path","basename","existsSync","prompts","fs","addFiles","options","files","filesCreated","filesUpdated","filesSkipped","filesCreatedSpinner","spinner","file","targetDir","getFileTargetDir","fileName","basename","targetPath","path","existingFile","existsSync","overwrite","prompts","loggingColor","fs","content","getFileContent","componentName","templatePath","error","logger","handle_error_default","addComponents","components","options","registryInfo","getRegistryIndex","logger","found","notFound","filterRequestedComponents","itemsToRegister","resolveRegistryDependencies","addDependencies","item","dep","addFiles","addOptionsSchema","z","add","Command","comp","opt","options","path","checkInitialized","logger","preFlightAdd","addComponents","error","add_default","Command","z","fs","fse","path","MINIMUM_MAJOR_VERSION","SUPPORTED_SPECIAL_VERSIONS","checkProjectSetUp","projectDir","fs","path","checkShadcnPresents","getPayloadAppDetails","isSrcDir","payloadVersion","fse","createPayloadDetails","versionMatch","logger","special","major","isSupported","isVersionSupported","MINIMUM_MAJOR_VERSION","SUPPORTED_SPECIAL_VERSIONS","isSupportedPayloadVersion","prompts","execa","initShadcn","cwd","packageManager","shadcnSpinner","spinner","command","execa","error","handle_error_default","path","initOptionSchema","z","init","Command","o","options","checkProjectSetUp","logger","loggingColor","getPayloadAppDetails","packageManager","getPackageManager","checkShadcnPresents","proceed","prompts","initShadcn","CONFIG_FILE","componentSpinner","spinner","targetPath","createConfig","defaultConfig","e","handle_error_default","main","package_default","Command","add_default","init"]}