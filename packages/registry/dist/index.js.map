{"version":3,"sources":["../src/index.ts","../package.json","../src/commands/add.ts","../src/utils/logging/logger.ts","../src/utils/registry/componentsFilter.ts","../src/utils/registry/schema.ts","../src/utils/registry/fetchRegistry.ts","../src/utils/error/handle-error.ts","../src/utils/registry/resolveRegistryDependencies.ts","../src/utils/add/addDependencies.ts","../src/utils/getPackageManager.ts","../src/utils/spinner.ts","../src/utils/add/addFiles.ts","../src/utils/config/configHandler.ts","../src/utils/add/addComponents.ts","../src/utils/preflights/preflightAdd.ts","../src/commands/init.ts","../src/utils/initShadcn.ts","../src/utils/preflights/preflightInit.ts"],"sourcesContent":["#!/usr/bin/env node\r\n\r\nimport { Command } from \"commander\";\r\nimport packageJson from \"../package.json\";\r\nimport add from \"./commands/add\";\r\nimport { init } from \"./commands/init\";\r\n\r\nprocess.on(\"SIGINT\", () => process.exit(0));\r\nprocess.on(\"SIGTERM\", () => process.exit(0));\r\n\r\nasync function main() {\r\n  const program = new Command()\r\n    .name(\"basepl\")\r\n    .description(\"add fields and blocks to your payload cms project\")\r\n    .version(\r\n      packageJson.version || \"1.0.0\",\r\n      \"-v, --version\",\r\n      \"display the version number\",\r\n    );\r\n\r\n  program.addCommand(add).addCommand(init);\r\n\r\n  program.parse();\r\n}\r\n\r\nmain();\r\n","{\r\n  \"name\": \"@basepl/cli\",\r\n  \"version\": \"1.0.2\",\r\n  \"description\": \"Add fields and blocks to your payload cms.\",\r\n  \"publishConfig\": {\r\n    \"access\": \"public\"\r\n  },\r\n  \"license\": \"MIT\",\r\n  \"author\": {\r\n    \"name\": \"devsub\",\r\n    \"url\": \"https://devsub.de/en\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/devsub-agency/payloadbase\",\r\n    \"directory\": \"templates\"\r\n  },\r\n  \"files\": [\r\n    \"dist\",\r\n    \"README.md\"\r\n  ],\r\n  \"keywords\": [\r\n    \"payload\",\r\n    \"components\",\r\n    \"fields\",\r\n    \"blocks\"\r\n  ],\r\n  \"type\": \"module\",\r\n \"bin\": {\r\n    \"basepl\": \"./dist/index.js\"\r\n  },\r\n  \"exports\": {\r\n    \".\": {\r\n      \"import\": \"./dist/index.js\"\r\n    }\r\n  },\r\n  \"scripts\": {\r\n    \"dev\": \"tsup --watch\",\r\n    \"build\": \"tsup\",\r\n    \"typecheck\": \"tsc --noEmit\",\r\n    \"clean\": \"rimraf dist node_modules\",\r\n    \"start:dev\": \"cross-env REGISTRY_URL=http://localhost:3000/registry node dist/index.js\",\r\n    \"start:prod\": \"cross-env REGISTRY_URL=https://basepl.com/registry/ node dist/index.js\",\r\n    \"start\": \"node dist/index.js\",\r\n    \"format:write\": \"prettier --write \\\"**/*.{ts,tsx,mdx}\\\" --cache\",\r\n    \"format:check\": \"prettier --check \\\"**/*.{ts,tsx,mdx}\\\" --cache\",\r\n    \"pub:beta\": \"pnpm build && pnpm publish --no-git-checks --access public --tag beta\",\r\n    \"pub:next\": \"pnpm build && pnpm publish --no-git-checks --access public --tag next\",\r\n    \"pub:release\": \"pnpm build && pnpm publish --access public\",\r\n    \"test\": \"vitest run\",\r\n    \"test:dev\": \"REGISTRY_URL=http://localhost:3000/registry vitest run\"\r\n  },\r\n  \"dependencies\": {\r\n    \"chalk\": \"^5.3.0\",\r\n    \"commander\": \"^12.1.0\",\r\n    \"cosmiconfig\": \"^9.0.0\",\r\n    \"diff\": \"^7.0.0\",\r\n    \"execa\": \"^9.5.1\",\r\n    \"fast-glob\": \"^3.3.2\",\r\n    \"fs-extra\": \"^11.2.0\",\r\n    \"kleur\": \"^4.1.5\",\r\n    \"node-fetch\": \"^3.3.2\",\r\n    \"ora\": \"^8.1.1\",\r\n    \"prompts\": \"^2.4.2\",\r\n    \"ts-morph\": \"^24.0.0\",\r\n    \"tsconfig-paths\": \"^4.2.0\",\r\n    \"zod\": \"^3.23.8\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/fs-extra\": \"^11.0.4\",\r\n    \"@types/lodash.template\": \"^4.5.3\",\r\n    \"@types/prompts\": \"^2.4.9\",\r\n    \"tsup\": \"8.3.5\",\r\n    \"type-fest\": \"^4.29.0\",\r\n    \"typescript\": \"^5.7.2\",\r\n    \"rimraf\": \"^5.0.0\"\r\n  }\r\n}\r\n","import { Command } from \"commander\";\r\nimport path from \"path\";\r\nimport { z } from \"zod\";\r\nimport { addComponents } from \"../utils/add/addComponents\";\r\nimport { checkInitialized } from \"../utils/config/configHandler\";\r\nimport { logger } from \"../utils/logging/logger\";\r\nimport { preFlightAdd } from \"../utils/preflights/preflightAdd\";\r\n\r\nexport const addOptionsSchema = z.object({\r\n  components: z.array(z.string()).optional(),\r\n  yes: z.boolean(),\r\n  overwrite: z.boolean(),\r\n  cwd: z.string(),\r\n  config: z.boolean(),\r\n});\r\n\r\nconst add = new Command(\"add\")\r\n  .description(\"add fields and blocks to your payload cms project\")\r\n  .argument(\"[components...]\", \"the fields and blocks to add.\")\r\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", true)\r\n  .option(\"-o, --overwrite\", \"overwrite existing files.\", false)\r\n  .option(\r\n    \"-c, --cwd <cwd>\",\r\n    \"the working directory. defaults to the current directory.\",\r\n    process.cwd(),\r\n  )\r\n  .option(\"--config\", \"only add the config.ts without component\", false)\r\n  .action(async (comp, opt) => {\r\n    try {\r\n      const options = addOptionsSchema.parse({\r\n        components: comp,\r\n        cwd: path.resolve(opt.cwd),\r\n        ...opt,\r\n      });\r\n      const isInitialized = await checkInitialized(options.cwd);\r\n      if (!isInitialized) {\r\n        logger.error(\r\n          \"Project is not initialized. Please run 'payloadbase init' first\",\r\n        );\r\n        process.exit(0);\r\n      }\r\n\r\n      if (!options.components?.length) {\r\n        logger.error(\"Provide at least one field or block to install!\");\r\n        process.exit(0);\r\n      }\r\n      preFlightAdd(options);\r\n\r\n      await addComponents(options.components, options);\r\n    } catch (error) {\r\n      logger.error(\"An error occurred while adding the field:\", error);\r\n      process.exit(1);\r\n    }\r\n  });\r\n\r\nexport default add;\r\n","import { red, white, green, yellow } from \"kleur/colors\";\r\n\r\nexport const loggingColor = {\r\n  error: red,\r\n  warn: yellow,\r\n  info: white,\r\n  success: green,\r\n};\r\n\r\nexport const logger = {\r\n  error(...args: unknown[]) {\r\n    console.log(loggingColor.error(args.join(\" \")));\r\n  },\r\n  warn(...args: unknown[]) {\r\n    console.log(loggingColor.warn(args.join(\" \")));\r\n  },\r\n  info(...args: unknown[]) {\r\n    console.log(loggingColor.info(args.join(\" \")));\r\n  },\r\n  success(...args: unknown[]) {\r\n    console.log(loggingColor.success(args.join(\" \")));\r\n  },\r\n  log(...args: unknown[]) {\r\n    console.log(args.join(\" \"));\r\n  },\r\n  break() {\r\n    console.log(\"\");\r\n  },\r\n};\r\n","import { z } from \"zod\";\r\nimport { registryIndexSchema } from \"./schema\";\r\n\r\nconst filterComponentsResultSchema = z.object({\r\n  found: z.array(registryIndexSchema.element),\r\n  notFound: z.array(z.string()),\r\n});\r\n\r\ntype FilterComponentsResult = z.infer<typeof filterComponentsResultSchema>;\r\n\r\nexport const filterRequestedComponents = (\r\n  registry: z.infer<typeof registryIndexSchema>,\r\n  requestedComponents: string[],\r\n): FilterComponentsResult => {\r\n  const result = filterComponentsResultSchema.parse({\r\n    found: [],\r\n    notFound: [],\r\n  });\r\n\r\n  requestedComponents.forEach((requested) => {\r\n    const component = registry.find(\r\n      (item) => item.name.toLowerCase() === requested.toLowerCase(),\r\n    );\r\n\r\n    if (component) {\r\n      result.found.push(component);\r\n    } else {\r\n      result.notFound.push(requested);\r\n    }\r\n  });\r\n\r\n  return result;\r\n};\r\n","import { z } from \"zod\";\r\n\r\nexport const registryFileSchemaType = z.enum([\r\n  \"templates/fields\",\r\n  \"templates/blocks\",\r\n  \"templates/components\",\r\n]);\r\n\r\nexport const registryItemFileSchema = z.object({\r\n  path: z.string(),\r\n  content: z.string().optional(),\r\n  type: registryFileSchemaType,\r\n});\r\n\r\n/**\r\n * In the index.json we list every file contained in a folder. The representation of files is always a folder in the registry.\r\n * When we fetch the content from the registry these files are all seperated as individual items. The structure is the same as later in the project.\r\n */\r\nexport const registryItemSchema = z.object({\r\n  name: z.string(),\r\n  type: registryFileSchemaType,\r\n  file: registryItemFileSchema,\r\n});\r\n\r\nexport const registryIndexFileItem = z.object({\r\n  path: z.string(),\r\n  type: registryFileSchemaType,\r\n});\r\n\r\nexport const registryIndexItem = z.object({\r\n  name: z.string(),\r\n  type: registryFileSchemaType,\r\n  dependencies: z.array(z.string()).optional(),\r\n  registryDependencies: z.array(z.string()).optional(),\r\n  files: z.array(registryIndexFileItem),\r\n});\r\nexport type RegistryFile = z.infer<typeof registryIndexFileItem>;\r\n\r\nexport type RegistryItem = z.infer<typeof registryIndexItem>;\r\n\r\nexport const registryIndexSchema = z.array(registryIndexItem);\r\n","import path from \"path\";\r\nimport handleError from \"../error/handle-error\";\r\nimport { logger } from \"../logging/logger\";\r\nimport { registryIndexSchema } from \"./schema\";\r\n\r\nconst REGISTRY_URL = process.env.REGISTRY_URL ?? \"https://basepl.com/registry\";\r\n\r\nexport const getRegistryIndex = async () => {\r\n  try {\r\n    const result = await fetchRegistry(\"index.json\");\r\n    return registryIndexSchema.parse(result);\r\n  } catch (e) {\r\n    logger.error(\"\\n\");\r\n    handleError(e);\r\n  }\r\n};\r\n\r\nexport const fetchRegistry = async (path: string) => {\r\n  try {\r\n    const result = await fetch(getRegistryUrl(path));\r\n    if (!result.ok) {\r\n      throw new Error(`Failed to fetch registry: ${result.statusText}`);\r\n    }\r\n    return result.json();\r\n  } catch (e) {\r\n    logger.error(\"\\n\");\r\n    handleError(e);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst getRegistryUrl = (path: string) => {\r\n  if (!path.endsWith(\".json\")) {\r\n    path = replaceExtensionWithJson(path);\r\n  }\r\n  return `${REGISTRY_URL}/${path}`;\r\n};\r\n\r\nconst replaceExtensionWithJson = (filePath: string): string => {\r\n  if (filePath.endsWith(\".json\")) return filePath;\r\n\r\n  const parsedPath = path.parse(filePath);\r\n  return path.format({\r\n    ...parsedPath,\r\n    base: undefined,\r\n    ext: \".json\",\r\n  });\r\n};\r\n","import { z } from \"zod\";\r\nimport { logger, loggingColor } from \"@/src/utils/logging/logger\";\r\n\r\nconst handleError = (error: unknown) => {\r\n  logger.error(\r\n    `Something went wrong. Please check the error below for more details.`,\r\n  );\r\n  logger.error(`If the problem persists, please open an issue on GitHub.`);\r\n  logger.error(\"\");\r\n  if (typeof error === \"string\") {\r\n    logger.error(error);\r\n    logger.break();\r\n    process.exit(1);\r\n  }\r\n\r\n  if (error instanceof z.ZodError) {\r\n    logger.error(\"Validation failed:\");\r\n    for (const [key, value] of Object.entries(error.flatten().fieldErrors)) {\r\n      logger.error(`- ${loggingColor.info(key)}: ${value}`);\r\n    }\r\n    logger.break();\r\n    process.exit(1);\r\n  }\r\n\r\n  if (error instanceof Error) {\r\n    logger.error(error.message);\r\n    logger.break();\r\n    process.exit(1);\r\n  }\r\n\r\n  logger.break();\r\n  process.exit(1);\r\n};\r\n\r\nexport default handleError;\r\n","import { RegistryItem } from \"./schema\";\r\n\r\nexport const resolveRegistryDependencies = async (\r\n  items: RegistryItem[],\r\n  registryIndex: RegistryItem[],\r\n): Promise<RegistryItem[]> => {\r\n  const resolved = new Set<string>(); // Track processed items\r\n  const result: RegistryItem[] = []; // Store final list\r\n\r\n  const resolveDependencies = (item: RegistryItem) => {\r\n    if (resolved.has(item.name)) {\r\n      return;\r\n    }\r\n    resolved.add(item.name);\r\n    if (item.registryDependencies?.length) {\r\n      item.registryDependencies.forEach((depName) => {\r\n        const dependency = registryIndex.find((reg) => reg.name === depName);\r\n        if (dependency) {\r\n          resolveDependencies(dependency);\r\n        }\r\n      });\r\n    }\r\n    result.push(item);\r\n  };\r\n  items.forEach((item) => resolveDependencies(item));\r\n  return result;\r\n};\r\n","import path from \"path\";\r\nimport { getPackageManager } from \"../getPackageManager\";\r\nimport { RegistryItem } from \"../registry/schema\";\r\nimport { spinner } from \"../spinner\";\r\nimport fse from \"fs-extra\";\r\nimport { type PackageJson } from \"type-fest\";\r\nimport { logger } from \"../logging/logger\";\r\nimport prompts from \"prompts\";\r\nimport { execa } from \"execa\";\r\n\r\nexport const addDependencies = async (\r\n  cwd: string,\r\n  dependencies: RegistryItem[\"dependencies\"],\r\n) => {\r\n  if (!dependencies?.length) {\r\n    return;\r\n  }\r\n  const dependenciesSpinner = spinner(`Installing dependencies.`).start();\r\n  const packageManager = await getPackageManager({\r\n    options: null,\r\n    projectDir: cwd,\r\n  });\r\n  let flag = \"\";\r\n  if (isUsingReact19(cwd) && packageManager === \"npm\") {\r\n    dependenciesSpinner.stopAndPersist();\r\n    logger.warn(\r\n      \"\\nIt looks like you are using React 19. \\nSome packages may fail to install due to peer dependency issues in npm (see https://ui.shadcn.com/react-19).\\n\",\r\n    );\r\n    const confirmation = await prompts([\r\n      {\r\n        type: \"select\",\r\n        name: \"flag\",\r\n        message: \"How would you like to proceed?\",\r\n        choices: [\r\n          { title: \"Use --force\", value: \"force\" },\r\n          { title: \"Use --legacy-peer-deps\", value: \"legacy-peer-deps\" },\r\n        ],\r\n      },\r\n    ]);\r\n\r\n    if (confirmation) {\r\n      flag = confirmation.flag;\r\n    }\r\n  }\r\n  dependenciesSpinner?.start();\r\n  await execa(\r\n    packageManager,\r\n    [\r\n      packageManager === \"npm\" ? \"install\" : \"add\",\r\n      ...(packageManager === \"npm\" && flag ? [`--${flag}`] : []),\r\n      ...dependencies,\r\n    ],\r\n    {\r\n      cwd: cwd,\r\n    },\r\n  );\r\n  dependenciesSpinner?.succeed();\r\n};\r\n\r\nconst isUsingReact19 = (cwd: string) => {\r\n  const packageJsonPath = path.join(cwd, \"package.json\");\r\n  const packageJson = fse.readJSONSync(packageJsonPath, {\r\n    throws: true,\r\n  }) as PackageJson;\r\n\r\n  if (!packageJson?.dependencies?.react) {\r\n    return false;\r\n  }\r\n\r\n  return /^(?:\\^|~)?19(?:\\.\\d+)*(?:-.*)?$/.test(packageJson.dependencies.react);\r\n};\r\n","import { z } from \"zod\";\r\nimport fse from \"fs-extra\";\r\nimport { execa } from \"execa\";\r\nimport { initOptionSchema } from \"../commands/init\";\r\n\r\nexport type PackageManager = \"npm\" | \"yarn\" | \"pnpm\" | \"bun\";\r\n\r\nexport async function getPackageManager(args: {\r\n  options: z.infer<typeof initOptionSchema> | null;\r\n  projectDir: string;\r\n}): Promise<PackageManager> {\r\n  const { options, projectDir } = args;\r\n\r\n  try {\r\n    // Check for flag or lockfile\r\n    let detected: PackageManager = \"npm\";\r\n    if (options?.pnpm || fse.existsSync(`${projectDir}/pnpm-lock.yaml`)) {\r\n      detected = \"pnpm\";\r\n    } else if (options?.yarn || fse.existsSync(`${projectDir}/yarn.lock`)) {\r\n      detected = \"yarn\";\r\n    } else if (\r\n      options?.npm ||\r\n      fse.existsSync(`${projectDir}/package-lock.json`)\r\n    ) {\r\n      detected = \"npm\";\r\n    } else if (options?.bun || fse.existsSync(`${projectDir}/bun.lockb`)) {\r\n      detected = \"bun\";\r\n    } else if (await commandExists(\"pnpm\")) {\r\n      // Prefer pnpm if it's installed\r\n      detected = \"pnpm\";\r\n    }\r\n\r\n    return detected;\r\n  } catch (ignore) {\r\n    return \"npm\";\r\n  }\r\n\r\n  async function commandExists(command: string): Promise<boolean> {\r\n    try {\r\n      process.platform === \"win32\"\r\n        ? await execa`where ${command}`\r\n        : await execa`command -v ${command}`;\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import ora, { type Options } from \"ora\";\r\n\r\nexport function spinner(\r\n  text: Options[\"text\"],\r\n  options?: {\r\n    silent?: boolean;\r\n  },\r\n) {\r\n  return ora({\r\n    text,\r\n    isSilent: options?.silent,\r\n  });\r\n}\r\n","import { existsSync, promises as fs } from \"fs\";\r\nimport path, { basename, dirname } from \"path\";\r\nimport prompts from \"prompts\";\r\nimport handleError from \"../error/handle-error\";\r\nimport { logger, loggingColor } from \"../logging/logger\";\r\nimport { fetchRegistry } from \"../registry/fetchRegistry\";\r\nimport {\r\n  RegistryFile,\r\n  RegistryItem,\r\n  registryItemSchema,\r\n} from \"../registry/schema\";\r\nimport { spinner } from \"../spinner\";\r\nimport { ConfigFile } from \"../config/configFile\";\r\n\r\nconst getFileContent = async (file: RegistryFile): Promise<string> => {\r\n  try {\r\n    logger.info(`\\n Reading template: ${file.path}`);\r\n    const result = await fetchRegistry(file.path);\r\n    const content = registryItemSchema.parse(result).file.content;\r\n    if (!content) {\r\n      logger.error(\r\n        `This should not happen. Template ${file.path} is empty. Please check the registry and open an issue.`,\r\n      );\r\n      process.exit(1);\r\n    }\r\n    return content;\r\n  } catch (error) {\r\n    logger.error(`Failed to read template: ${file.path}`);\r\n    handleError(error);\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const addFiles = async (\r\n  options: { cwd: string; overwrite?: boolean, configOnly?: boolean },\r\n  files: RegistryItem[\"files\"],\r\n  config: ConfigFile,\r\n) => {\r\n  if (!files?.length) return;\r\n\r\n  const filesCreated: string[] = [];\r\n  const filesUpdated: string[] = [];\r\n  const filesSkipped: string[] = [];\r\n\r\n  const addFileSpinner = spinner(\"Adding files change ...\").start();\r\n\r\n  try {\r\n    for (const file of files) {\r\n      const fileName = basename(file.path);\r\n      if (fileName.includes(\".tsx\") && !config.shadcnInstalled) {\r\n        logger.warn(\r\n          `File ${loggingColor.info(fileName)} is a component file. This project was initialized without shadcn/ui, so components are skipped.`,\r\n        );\r\n        continue;\r\n      }\r\n      if (fileName.includes(\".tsx\") && options.configOnly) {\r\n        logger.warn(\r\n          `File ${loggingColor.info(fileName)} is a component file. This command was called with --config flag, so components are skipped.`,\r\n        );\r\n        continue;\r\n      }\r\n      const targetDir = path\r\n        .join(options.cwd, \"src\", file.path)\r\n        .replace(fileName, \"\");\r\n      const targetPath = path.join(targetDir, fileName);\r\n\r\n      if (existsSync(targetPath) && !options.overwrite) {\r\n        addFileSpinner.stop();\r\n        const { overwrite } = await prompts({\r\n          type: \"confirm\",\r\n          name: \"overwrite\",\r\n          message: `File ${loggingColor.info(basename(file.path))} exists. Overwrite?`,\r\n          initial: false,\r\n        });\r\n\r\n        if (!overwrite) {\r\n          filesSkipped.push(path.relative(options.cwd, targetPath));\r\n          addFileSpinner.start();\r\n          continue;\r\n        }\r\n        addFileSpinner.start();\r\n      }\r\n\r\n      await fs.mkdir(targetDir, { recursive: true });\r\n      const content = await getFileContent(file);\r\n      await fs.writeFile(targetPath, content, \"utf-8\");\r\n\r\n      const relativePath = path.relative(options.cwd, targetPath);\r\n\r\n      existsSync(targetPath)\r\n        ? filesUpdated.push(relativePath)\r\n        : filesCreated.push(relativePath);\r\n    }\r\n\r\n    addFileSpinner.succeed(\"Files added successfully\");\r\n\r\n    if (filesCreated.length) {\r\n      logger.info(\r\n        \"Created files:\\n\" + filesCreated.map((f) => `  ${f}`).join(\"\\n\"),\r\n      );\r\n    }\r\n    if (filesUpdated.length) {\r\n      logger.info(\r\n        \"Updated files:\\n\" + filesUpdated.map((f) => `  ${f}`).join(\"\\n\"),\r\n      );\r\n    }\r\n    if (filesSkipped.length) {\r\n      logger.info(\r\n        \"Skipped files:\\n\" + filesSkipped.map((f) => `  ${f}`).join(\"\\n\"),\r\n      );\r\n    }\r\n  } catch (error) {\r\n    addFileSpinner.fail(\"Failed to add files\");\r\n    handleError(error);\r\n  }\r\n};\r\n","import path from \"path\";\r\nimport fs from \"fs-extra\";\r\nimport { ConfigFile } from \"./configFile\";\r\n\r\nexport const CONFIG_FILE = \".payloadbase.json\";\r\n\r\nexport const createConfig = async (\r\n  cwd: string,\r\n  config: Partial<ConfigFile>,\r\n) => {\r\n  const defaultConfig: ConfigFile = {\r\n    version: \"1.0.0\",\r\n    initialized: true,\r\n    timestamp: new Date().toISOString(),\r\n    shadcnInstalled: false,\r\n    ...config,\r\n  };\r\n  await fs.writeJSON(path.join(cwd, CONFIG_FILE), defaultConfig, { spaces: 2 });\r\n};\r\n\r\nexport const getConfig = async (cwd: string): Promise<ConfigFile | null> => {\r\n  try {\r\n    return await fs.readJSON(path.join(cwd, CONFIG_FILE));\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const checkInitialized = async (cwd: string): Promise<boolean> => {\r\n  const config = await getConfig(cwd);\r\n  return Boolean(config?.initialized);\r\n};\r\n\r\nexport const defaultConfig: ConfigFile = {\r\n  version: \"1.0.0\",\r\n  initialized: true,\r\n  timestamp: new Date().toISOString(),\r\n  shadcnInstalled: false,\r\n};\r\n","import { addOptionsSchema } from \"@/src/commands/add\";\r\nimport { z } from \"zod\";\r\nimport { logger } from \"../logging/logger\";\r\nimport { filterRequestedComponents } from \"../registry/componentsFilter\";\r\nimport { getRegistryIndex } from \"../registry/fetchRegistry\";\r\nimport { resolveRegistryDependencies } from \"../registry/resolveRegistryDependencies\";\r\nimport { addDependencies } from \"./addDependencies\";\r\nimport { addFiles } from \"./addFiles\";\r\nimport { getConfig } from \"../config/configHandler\";\r\n\r\nexport const addComponents = async (\r\n  components: string[],\r\n  options: z.infer<typeof addOptionsSchema>,\r\n) => {\r\n  const registryInfo = await getRegistryIndex();\r\n  if (!registryInfo) {\r\n    logger.error(\"Failed to fetch registry\");\r\n    process.exit(1);\r\n  }\r\n\r\n  const { found, notFound } = filterRequestedComponents(\r\n    registryInfo,\r\n    components,\r\n  );\r\n\r\n  if (notFound.length > 0) {\r\n    logger.warn(`Components not found in registry: ${notFound.join(\", \")}`);\r\n\r\n    if (found.length === 0) {\r\n      logger.error(\"No valid components to install\");\r\n      process.exit(1);\r\n    }\r\n  }\r\n  const config = await getConfig(options.cwd);\r\n  if (!config) {\r\n    logger.error(\"Failed to read config file\");\r\n    process.exit(1);\r\n  }\r\n  const itemsToRegister = await resolveRegistryDependencies(\r\n    found,\r\n    registryInfo,\r\n  );\r\n\r\n  await addDependencies(\r\n    options.cwd,\r\n    itemsToRegister.flatMap(\r\n      (item) =>\r\n        item.dependencies?.filter((dep): dep is string => dep !== undefined) ??\r\n        [],\r\n    ),\r\n  );\r\n  await addFiles(\r\n    { cwd: options.cwd, overwrite: options.overwrite , configOnly: options.config },\r\n    itemsToRegister.flatMap((item) => item.files),\r\n    config,\r\n  );\r\n};\r\n","import { addOptionsSchema } from \"../../commands/add\";\r\nimport { z } from \"zod\";\r\nimport { existsSync } from \"fs\";\r\nimport path from \"path\";\r\nimport { logger } from \"../logging/logger\";\r\n\r\nexport const preFlightAdd = (options: z.infer<typeof addOptionsSchema>) => {\r\n  if (\r\n    !existsSync(options.cwd) ||\r\n    !existsSync(path.resolve(options.cwd, \"package.json\"))\r\n  ) {\r\n    logger.error(\r\n      \"Target project does not exist or is not a valid Payload project\",\r\n    );\r\n    process.exit(0);\r\n  }\r\n};\r\n","import { Command } from \"commander\";\r\nimport path from \"path\";\r\nimport prompts from \"prompts\";\r\nimport { z } from \"zod\";\r\nimport {\r\n  CONFIG_FILE,\r\n  createConfig,\r\n  defaultConfig,\r\n} from \"../utils/config/configHandler\";\r\nimport handleError from \"../utils/error/handle-error\";\r\nimport { getPackageManager } from \"../utils/getPackageManager\";\r\nimport { initShadcn } from \"../utils/initShadcn\";\r\nimport { logger, loggingColor } from \"../utils/logging/logger\";\r\nimport {\r\n  checkProjectSetUp,\r\n  checkShadcnPresents,\r\n  getPayloadAppDetails,\r\n} from \"../utils/preflights/preflightInit\";\r\nimport { spinner } from \"../utils/spinner\";\r\n\r\nexport const initOptionSchema = z.object({\r\n  cwd: z.string(),\r\n  yes: z.boolean(),\r\n  defaults: z.boolean(),\r\n  npm: z.boolean().optional(),\r\n  bun: z.boolean().optional(),\r\n  yarn: z.boolean().optional(),\r\n  pnpm: z.boolean().optional(),\r\n  config: z.boolean().optional(),\r\n});\r\n\r\nexport const init = new Command()\r\n  .name(\"init\")\r\n  .description(\"Initialize your project and install dependencies.\")\r\n  .option(\r\n    \"-c, --cwd <cwd>\",\r\n    \"the working directory. defaults to the current directory.\",\r\n    process.cwd(),\r\n  )\r\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", true)\r\n  .option(\"-d, --defaults,\", \"use default configuration.\", false)\r\n  .option(\"--npm,\", \"use npm to install dependencies\", false)\r\n  .option(\"--bun,\", \"use bun to install dependencies\", false)\r\n  .option(\"--yarn,\", \"use yarn to install dependencies\", false)\r\n  .option(\"--pnpm,\", \"use pnpm to install dependencies\", false)\r\n  .option(\r\n    \"--config,\",\r\n    `initialize in config only mode, not components can be installed.`,\r\n    false,\r\n  )\r\n  .action(async (o) => {\r\n    try {\r\n      const options = initOptionSchema.parse(o);\r\n      const payloadCheckSpinner = spinner(\"Checking project setup.\").start();\r\n      const isPayloadPresents = await checkProjectSetUp(options.cwd);\r\n      let isShadcnPresentInitialized = false;\r\n      if (!isPayloadPresents) {\r\n        payloadCheckSpinner.fail();\r\n        logger.error(\"Payload is not present in the project.\");\r\n        logger.warn(\r\n          `Please init the project with payload first. Use ${loggingColor.success(\"'npx create-payload-app'\")} or check out the official payload documentation.`,\r\n        );\r\n        process.exit(0);\r\n      }\r\n      payloadCheckSpinner.succeed();\r\n      const appDetails = await getPayloadAppDetails(options.cwd);\r\n      if (!appDetails.isSupportedPayloadVersion) {\r\n        process.exit(0);\r\n      }\r\n      if (!options.config) {\r\n        const packageManager = await getPackageManager({\r\n          options,\r\n          projectDir: options.cwd,\r\n        });\r\n        const isShadcnPresents = await checkShadcnPresents(options.cwd);\r\n        if (isShadcnPresents) {\r\n          isShadcnPresentInitialized = true;\r\n          logger.info(\"Shadcn is already present in the project.\");\r\n        } else {\r\n          logger.info(\"Shadcn is not present in the project.\");\r\n          if (!options.yes) {\r\n            const { proceed } = await prompts({\r\n              type: \"confirm\",\r\n              name: \"proceed\",\r\n              message:\r\n                \"Do you want to install shadcn/ui in the project? If not, you wont be able to install components, only config files.\",\r\n              initial: true,\r\n            });\r\n\r\n            if (proceed) {\r\n              await initShadcn({ cwd: options.cwd, packageManager });\r\n              isShadcnPresentInitialized = true;\r\n            } else {\r\n              logger.info(\r\n                \"Initialize in config only mode. No components will be installed.\",\r\n              );\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        logger.info(\r\n          \"Initialize in config only mode. No components will be installed.\",\r\n        );\r\n      }\r\n\r\n      if (!options.yes) {\r\n        const { proceed } = await prompts({\r\n          type: \"confirm\",\r\n          name: \"proceed\",\r\n          message: `Write configuration to ${loggingColor.info(\r\n            `${CONFIG_FILE}`,\r\n          )}. Proceed?`,\r\n          initial: true,\r\n        });\r\n\r\n        if (!proceed) {\r\n          process.exit(0);\r\n        }\r\n      }\r\n\r\n      const componentSpinner = spinner(`Writing ${CONFIG_FILE}.`).start();\r\n      await createConfig(options.cwd, {\r\n        ...defaultConfig,\r\n        shadcnInstalled: isShadcnPresentInitialized,\r\n      });\r\n      componentSpinner.succeed();\r\n\r\n      logger.success(\"Project is ready to install components!\");\r\n      logger.info(\r\n        `Use ${loggingColor.success(\"'add <component>'\")} to install components. For a list of available components and for further information check the documentation.`,\r\n      );\r\n    } catch (e) {\r\n      logger.break();\r\n      handleError(e);\r\n    }\r\n  });\r\n","import { execa } from \"execa\";\r\nimport { logger } from \"./logging/logger\";\r\nimport { PackageManager } from \"./getPackageManager\";\r\nimport { spinner } from \"./spinner\";\r\nimport handleError from \"./error/handle-error\";\r\n\r\ninterface InitShadcnProps {\r\n  cwd: string;\r\n  packageManager: PackageManager;\r\n}\r\n\r\nexport async function initShadcn({ cwd, packageManager }: InitShadcnProps) {\r\n  try {\r\n    const command =\r\n      packageManager === \"npm\"\r\n        ? [\"npx\", \"shadcn@latest\", \"init\"]\r\n        : [packageManager, \"dlx\", \"shadcn@latest\", \"init\"];\r\n\r\n    await execa(command[0], command.slice(1), {\r\n      cwd,\r\n      stdio: \"inherit\",\r\n      shell: true,\r\n    });\r\n  } catch (error) {\r\n    handleError(error);\r\n  }\r\n}\r\n","import { initOptionSchema } from \"@/src/commands/init\";\r\nimport { existsSync } from \"fs\";\r\nimport fs from \"fs-extra\";\r\nimport path from \"path\";\r\nimport { z } from \"zod\";\r\nimport { logger } from \"../logging/logger\";\r\n\r\nexport type PayloadAppDetails = {\r\n  isSrcDir: boolean;\r\n  isSupportedPayloadVersion: boolean;\r\n  payloadVersion: string | null;\r\n};\r\n\r\nconst MINIMUM_MAJOR_VERSION = 3;\r\nconst SUPPORTED_SPECIAL_VERSIONS = [\"latest\"];\r\n\r\nexport async function preFlightInit(\r\n  options: z.infer<typeof initOptionSchema>,\r\n) {}\r\n\r\n//Default check for project\r\nexport const checkProjectSetUp = async (projectDir: string) => {\r\n  const isPayloadPresents = existsSync(\r\n    path.resolve(projectDir, \"src/payload.config.ts\"),\r\n  );\r\n  return isPayloadPresents;\r\n};\r\n\r\nexport const checkShadcnPresents = async (projectDir: string) => {\r\n  const isShadcnPresents = existsSync(\r\n    path.resolve(projectDir, \"components.json\"),\r\n  );\r\n  return isShadcnPresents;\r\n};\r\n\r\nexport const getPayloadAppDetails = async (\r\n  projectDir: string,\r\n): Promise<PayloadAppDetails> => {\r\n  const isSrcDir = existsSync(path.resolve(projectDir, \"src\"));\r\n  const packageObj = await fs.readJson(\r\n    path.resolve(projectDir, \"package.json\"),\r\n  );\r\n  const payloadVersion = packageObj.dependencies?.payload ?? null;\r\n\r\n  if (!payloadVersion) {\r\n    return createPayloadDetails(isSrcDir, false, null);\r\n  }\r\n\r\n  const versionMatch = payloadVersion.match(\r\n    /^(?:(?<major>\\d+)|(?<special>latest|beta))$/i,\r\n  );\r\n\r\n  if (!versionMatch) {\r\n    logger.warn(`Could not determine payload version from ${payloadVersion}`);\r\n    return createPayloadDetails(isSrcDir, false, payloadVersion);\r\n  }\r\n\r\n  const { special, major } = versionMatch.groups;\r\n  const isSupported = isVersionSupported(special, major);\r\n\r\n  if (!isSupported) {\r\n    logger.warn(\r\n      `Unsupported payload version ${payloadVersion}. Version must be latest or >= ${MINIMUM_MAJOR_VERSION}.0.0`,\r\n    );\r\n  }\r\n\r\n  return createPayloadDetails(isSrcDir, isSupported, payloadVersion);\r\n};\r\n\r\nconst isVersionSupported = (special?: string, major?: string): boolean => {\r\n  if (special) {\r\n    return SUPPORTED_SPECIAL_VERSIONS.includes(special.toLowerCase());\r\n  }\r\n  return major ? parseInt(major) >= MINIMUM_MAJOR_VERSION : false;\r\n};\r\n\r\nconst createPayloadDetails = (\r\n  isSrcDir: boolean,\r\n  isSupportedPayloadVersion: boolean,\r\n  payloadVersion: string | null,\r\n): PayloadAppDetails => ({\r\n  isSrcDir,\r\n  isSupportedPayloadVersion,\r\n  payloadVersion,\r\n});\r\n"],"mappings":"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","names":["Command","package_default","Command","path","z","red","white","green","yellow","loggingColor","logger","args","z","z","registryFileSchemaType","registryItemFileSchema","registryItemSchema","registryIndexFileItem","registryIndexItem","registryIndexSchema","filterComponentsResultSchema","z","registryIndexSchema","filterRequestedComponents","registry","requestedComponents","result","requested","component","item","path","z","handleError","error","logger","z","key","value","loggingColor","handle_error_default","REGISTRY_URL","getRegistryIndex","result","fetchRegistry","registryIndexSchema","logger","handle_error_default","path","getRegistryUrl","e","replaceExtensionWithJson","filePath","parsedPath","resolveRegistryDependencies","items","registryIndex","resolved","result","resolveDependencies","item","depName","dependency","reg","path","fse","execa","getPackageManager","args","options","projectDir","detected","commandExists","command","ora","spinner","text","options","fse","prompts","execa","addDependencies","cwd","dependencies","dependenciesSpinner","spinner","packageManager","getPackageManager","flag","isUsingReact19","logger","confirmation","packageJsonPath","path","packageJson","fse","existsSync","fs","path","basename","prompts","getFileContent","file","logger","result","fetchRegistry","content","registryItemSchema","error","handle_error_default","addFiles","options","files","config","filesCreated","filesUpdated","filesSkipped","addFileSpinner","spinner","fileName","basename","loggingColor","targetDir","path","targetPath","existsSync","overwrite","prompts","fs","relativePath","f","path","fs","CONFIG_FILE","createConfig","cwd","config","defaultConfig","getConfig","checkInitialized","addComponents","components","options","registryInfo","getRegistryIndex","logger","found","notFound","filterRequestedComponents","config","getConfig","itemsToRegister","resolveRegistryDependencies","addDependencies","item","dep","addFiles","existsSync","path","preFlightAdd","options","existsSync","path","logger","addOptionsSchema","z","add","Command","comp","opt","options","path","checkInitialized","logger","preFlightAdd","addComponents","error","add_default","Command","prompts","z","execa","initShadcn","cwd","packageManager","command","execa","error","handle_error_default","existsSync","fs","path","MINIMUM_MAJOR_VERSION","SUPPORTED_SPECIAL_VERSIONS","checkProjectSetUp","projectDir","existsSync","path","checkShadcnPresents","getPayloadAppDetails","isSrcDir","payloadVersion","fs","createPayloadDetails","versionMatch","logger","special","major","isSupported","isVersionSupported","MINIMUM_MAJOR_VERSION","SUPPORTED_SPECIAL_VERSIONS","isSupportedPayloadVersion","initOptionSchema","z","init","Command","o","options","payloadCheckSpinner","spinner","isPayloadPresents","checkProjectSetUp","isShadcnPresentInitialized","logger","loggingColor","getPayloadAppDetails","packageManager","getPackageManager","checkShadcnPresents","proceed","prompts","initShadcn","CONFIG_FILE","componentSpinner","createConfig","defaultConfig","e","handle_error_default","main","program","Command","package_default","add_default","init"]}